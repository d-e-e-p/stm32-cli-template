
interactive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec8  08007ec8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed0  08007ed0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d20  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e1c  20001e1c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017516  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037d0  00000000  00000000  00037685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c0  00000000  00000000  0003ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010d7  00000000  00000000  0003c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000244fb  00000000  00000000  0003d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ac13  00000000  00000000  000619ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0b71  00000000  00000000  0007c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c80  00000000  00000000  0014d170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00152df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e50 	.word	0x08007e50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007e50 	.word	0x08007e50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb96 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80c 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f922 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f872 	bl	80005bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d8:	f000 f89e 	bl	8000618 <MX_SPI1_Init>
  MX_TIM4_Init();
 80004dc:	f000 f8ce 	bl	800067c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f006 ff88 	bl	80073f4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x20>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fc7e 	bl	8007df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000558:	2308      	movs	r3, #8
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800055c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000566:	2307      	movs	r3, #7
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fa84 	bl	8002a7c <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057a:	f000 f9db 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2105      	movs	r1, #5
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fce5 	bl	8002f6c <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f9c4 	bl	8000934 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f000 fe7d 	bl	80012f8 <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f996 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000118 	.word	0x20000118
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_SPI1_Init+0x5c>)
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_SPI1_Init+0x60>)
 8000620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_SPI1_Init+0x5c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SPI1_Init+0x5c>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_SPI1_Init+0x5c>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_SPI1_Init+0x5c>)
 800065a:	220a      	movs	r2, #10
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_SPI1_Init+0x5c>)
 8000660:	f002 fe90 	bl	8003384 <HAL_SPI_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800066a:	f000 f963 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000016c 	.word	0x2000016c
 8000678:	40013000 	.word	0x40013000

0800067c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_TIM4_Init+0x94>)
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_TIM4_Init+0x98>)
 800069c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_TIM4_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_TIM4_Init+0x94>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_TIM4_Init+0x94>)
 80006ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM4_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_TIM4_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM4_Init+0x94>)
 80006c0:	f002 fffc 	bl	80036bc <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f933 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_TIM4_Init+0x94>)
 80006dc:	f003 f83d 	bl	800375a <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f925 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_TIM4_Init+0x94>)
 80006f8:	f003 fa30 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000702:	f000 f917 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001c4 	.word	0x200001c4
 8000714:	40000800 	.word	0x40000800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b7a      	ldr	r3, [pc, #488]	; (800091c <MX_GPIO_Init+0x204>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a79      	ldr	r2, [pc, #484]	; (800091c <MX_GPIO_Init+0x204>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b77      	ldr	r3, [pc, #476]	; (800091c <MX_GPIO_Init+0x204>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b73      	ldr	r3, [pc, #460]	; (800091c <MX_GPIO_Init+0x204>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a72      	ldr	r2, [pc, #456]	; (800091c <MX_GPIO_Init+0x204>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b70      	ldr	r3, [pc, #448]	; (800091c <MX_GPIO_Init+0x204>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b6c      	ldr	r3, [pc, #432]	; (800091c <MX_GPIO_Init+0x204>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a6b      	ldr	r2, [pc, #428]	; (800091c <MX_GPIO_Init+0x204>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b69      	ldr	r3, [pc, #420]	; (800091c <MX_GPIO_Init+0x204>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b65      	ldr	r3, [pc, #404]	; (800091c <MX_GPIO_Init+0x204>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a64      	ldr	r2, [pc, #400]	; (800091c <MX_GPIO_Init+0x204>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b62      	ldr	r3, [pc, #392]	; (800091c <MX_GPIO_Init+0x204>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_GPIO_Init+0x204>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a5d      	ldr	r2, [pc, #372]	; (800091c <MX_GPIO_Init+0x204>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x204>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <MX_GPIO_Init+0x204>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a56      	ldr	r2, [pc, #344]	; (800091c <MX_GPIO_Init+0x204>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <MX_GPIO_Init+0x204>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4851      	ldr	r0, [pc, #324]	; (8000920 <MX_GPIO_Init+0x208>)
 80007dc:	f000 fd72 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	484f      	ldr	r0, [pc, #316]	; (8000924 <MX_GPIO_Init+0x20c>)
 80007e6:	f000 fd6d 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	484d      	ldr	r0, [pc, #308]	; (8000928 <MX_GPIO_Init+0x210>)
 80007f2:	f000 fd67 	bl	80012c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4844      	ldr	r0, [pc, #272]	; (8000920 <MX_GPIO_Init+0x208>)
 800080e:	f000 fbbd 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	483e      	ldr	r0, [pc, #248]	; (8000924 <MX_GPIO_Init+0x20c>)
 800082a:	f000 fbaf 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4836      	ldr	r0, [pc, #216]	; (8000924 <MX_GPIO_Init+0x20c>)
 800084a:	f000 fb9f 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000852:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4832      	ldr	r0, [pc, #200]	; (800092c <MX_GPIO_Init+0x214>)
 8000864:	f000 fb92 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	482d      	ldr	r0, [pc, #180]	; (8000930 <MX_GPIO_Init+0x218>)
 800087c:	f000 fb86 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <MX_GPIO_Init+0x218>)
 800089e:	f000 fb75 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <MX_GPIO_Init+0x210>)
 80008bc:	f000 fb66 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d2:	2306      	movs	r3, #6
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_GPIO_Init+0x20c>)
 80008de:	f000 fb55 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_GPIO_Init+0x210>)
 80008f6:	f000 fb49 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0x208>)
 8000910:	f000 fb3c 	bl	8000f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3730      	adds	r7, #48	; 0x30
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097e:	2007      	movs	r0, #7
 8000980:	f000 faa0 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <HAL_I2C_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12c      	bne.n	8000a0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e0:	2304      	movs	r3, #4
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <HAL_I2C_MspInit+0x8c>)
 80009ec:	f000 face 	bl	8000f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40005400 	.word	0x40005400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_SPI_MspInit+0x94>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d133      	bne.n	8000aaa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_SPI_MspInit+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a7a:	23f0      	movs	r3, #240	; 0xf0
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_SPI_MspInit+0x9c>)
 8000a96:	f000 fa79 	bl	8000f8c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2023      	movs	r0, #35	; 0x23
 8000aa0:	f000 fa1b 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000aa4:	2023      	movs	r0, #35	; 0x23
 8000aa6:	f000 fa34 	bl	8000f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40013000 	.word	0x40013000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10d      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40000800 	.word	0x40000800
 8000b00:	40023800 	.word	0x40023800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f8a4 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <SPI1_IRQHandler+0x10>)
 8000b5e:	f002 fc9b 	bl	8003498 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000016c 	.word	0x2000016c

08000b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <OTG_FS_IRQHandler+0x10>)
 8000b72:	f000 fe55 	bl	8001820 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200016f0 	.word	0x200016f0

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd7 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f007 f919 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc75 	bl	80004c4 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000be8:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 8000bec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000bf0:	20001e1c 	.word	0x20001e1c

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fe88 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f967 	bl	8000f2e <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f000 f92f 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	2000020c 	.word	0x2000020c

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000020c 	.word	0x2000020c

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff3e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d004      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e00c      	b.n	8000f7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2205      	movs	r2, #5
 8000f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e16b      	b.n	8001280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 815a 	bne.w	800127a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80b4 	beq.w	800127a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <HAL_GPIO_Init+0x30c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <HAL_GPIO_Init+0x30c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_GPIO_Init+0x30c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a5b      	ldr	r2, [pc, #364]	; (800129c <HAL_GPIO_Init+0x310>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d02b      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x21a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x216>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4d      	ldr	r2, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x328>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x212>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_GPIO_Init+0x32c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x20e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x330>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x20a>
 8001192:	2307      	movs	r3, #7
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 8001196:	2308      	movs	r3, #8
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x310>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_GPIO_Init+0x334>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae90 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e12b      	b.n	8001562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d106      	bne.n	8001324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fb36 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	; 0x24
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800135c:	f001 fffe 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a81      	ldr	r2, [pc, #516]	; (800156c <HAL_I2C_Init+0x274>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d807      	bhi.n	800137c <HAL_I2C_Init+0x84>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_I2C_Init+0x278>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	e006      	b.n	800138a <HAL_I2C_Init+0x92>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a7d      	ldr	r2, [pc, #500]	; (8001574 <HAL_I2C_Init+0x27c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	bf94      	ite	ls
 8001384:	2301      	movls	r3, #1
 8001386:	2300      	movhi	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0e7      	b.n	8001562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a78      	ldr	r2, [pc, #480]	; (8001578 <HAL_I2C_Init+0x280>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_I2C_Init+0x274>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d802      	bhi.n	80013cc <HAL_I2C_Init+0xd4>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	e009      	b.n	80013e0 <HAL_I2C_Init+0xe8>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a69      	ldr	r2, [pc, #420]	; (800157c <HAL_I2C_Init+0x284>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	3301      	adds	r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	495c      	ldr	r1, [pc, #368]	; (800156c <HAL_I2C_Init+0x274>)
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d819      	bhi.n	8001434 <HAL_I2C_Init+0x13c>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e59      	subs	r1, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fbb1 f3f3 	udiv	r3, r1, r3
 800140e:	1c59      	adds	r1, r3, #1
 8001410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001414:	400b      	ands	r3, r1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_I2C_Init+0x138>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e59      	subs	r1, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fbb1 f3f3 	udiv	r3, r1, r3
 8001428:	3301      	adds	r3, #1
 800142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142e:	e051      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001430:	2304      	movs	r3, #4
 8001432:	e04f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <HAL_I2C_Init+0x168>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e012      	b.n	8001486 <HAL_I2C_Init+0x18e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x196>
 800148a:	2301      	movs	r3, #1
 800148c:	e022      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10e      	bne.n	80014b4 <HAL_I2C_Init+0x1bc>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1e58      	subs	r0, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	440b      	add	r3, r1
 80014a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	0099      	lsls	r1, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6809      	ldr	r1, [r1, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6911      	ldr	r1, [r2, #16]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68d2      	ldr	r2, [r2, #12]
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	000186a0 	.word	0x000186a0
 8001570:	001e847f 	.word	0x001e847f
 8001574:	003d08ff 	.word	0x003d08ff
 8001578:	431bde83 	.word	0x431bde83
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b08f      	sub	sp, #60	; 0x3c
 8001584:	af0a      	add	r7, sp, #40	; 0x28
 8001586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e10f      	b.n	80017b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d106      	bne.n	80015b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f006 f901 	bl	80077b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fc54 	bl	8003e7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	687e      	ldr	r6, [r7, #4]
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f4:	1d33      	adds	r3, r6, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f002 fb2b 	bl	8003c54 <USB_CoreInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0d0      	b.n	80017b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fc42 	bl	8003ea0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e04a      	b.n	80016b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	333d      	adds	r3, #61	; 0x3d
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	333c      	adds	r3, #60	; 0x3c
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	b298      	uxth	r0, r3
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3344      	adds	r3, #68	; 0x44
 800165e:	4602      	mov	r2, r0
 8001660:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	3340      	adds	r3, #64	; 0x40
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3348      	adds	r3, #72	; 0x48
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	334c      	adds	r3, #76	; 0x4c
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3354      	adds	r3, #84	; 0x54
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	3301      	adds	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3af      	bcc.n	8001622 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e044      	b.n	8001752 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	3301      	adds	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3b5      	bcc.n	80016c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
 800177a:	1d33      	adds	r3, r6, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f002 fbda 	bl	8003f38 <USB_DevInit>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00d      	b.n	80017b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fd29 	bl	8005202 <USB_DevDisconnect>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_Start+0x1c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e020      	b.n	8001818 <HAL_PCD_Start+0x5e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d109      	bne.n	80017fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fb2c 	bl	8003e5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fcd9 	bl	80051c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b08d      	sub	sp, #52	; 0x34
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fd97 	bl	800536a <USB_GetMode>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 848a 	bne.w	8002158 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fcfb 	bl	8005244 <USB_ReadInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8480 	beq.w	8002156 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fce8 	bl	8005244 <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f002 0202 	and.w	r2, r2, #2
 800188c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fcd6 	bl	8005244 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d161      	bne.n	8001966 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0210 	bic.w	r2, r2, #16
 80018b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 020f 	and.w	r2, r3, #15
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	3304      	adds	r3, #4
 80018d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	0c5b      	lsrs	r3, r3, #17
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d124      	bne.n	8001928 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d035      	beq.n	8001956 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f003 fb0d 	bl	8004f1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190e:	441a      	add	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001920:	441a      	add	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	e016      	b.n	8001956 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	0c5b      	lsrs	r3, r3, #17
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	2b06      	cmp	r3, #6
 8001932:	d110      	bne.n	8001956 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800193a:	2208      	movs	r2, #8
 800193c:	4619      	mov	r1, r3
 800193e:	6a38      	ldr	r0, [r7, #32]
 8001940:	f003 faec 	bl	8004f1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001950:	441a      	add	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0210 	orr.w	r2, r2, #16
 8001964:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fc6a 	bl	8005244 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800197a:	f040 80a7 	bne.w	8001acc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fc6f 	bl	800526a <USB_ReadDevAllOutEpInterrupt>
 800198c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800198e:	e099      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 808e 	beq.w	8001ab8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fc93 	bl	80052d2 <USB_ReadDevOutEPInterrupt>
 80019ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00c      	beq.n	80019d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c4:	461a      	mov	r2, r3
 80019c6:	2301      	movs	r3, #1
 80019c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fec3 	bl	8002758 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e8:	461a      	mov	r2, r3
 80019ea:	2308      	movs	r3, #8
 80019ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 ff99 	bl	8002928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2310      	movs	r3, #16
 8001a10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d030      	beq.n	8001a7e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d109      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f005 ffb8 	bl	80079dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a94:	461a      	mov	r2, r3
 8001a96:	2320      	movs	r3, #32
 8001a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3301      	adds	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f af62 	bne.w	8001990 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fbb7 	bl	8005244 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001adc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae0:	f040 80db 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fbd8 	bl	800529e <USB_ReadDevAllInEpInterrupt>
 8001aee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001af4:	e0cd      	b.n	8001c92 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80c2 	beq.w	8001c86 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fbfe 	bl	800530e <USB_ReadDevInEPInterrupt>
 8001b12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d057      	beq.n	8001bce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	2201      	movs	r2, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69f9      	ldr	r1, [r7, #28]
 8001b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b3e:	4013      	ands	r3, r2
 8001b40:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d132      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	334c      	adds	r3, #76	; 0x4c
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4403      	add	r3, r0
 8001b7c:	3348      	adds	r3, #72	; 0x48
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4419      	add	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4403      	add	r3, r0
 8001b90:	334c      	adds	r3, #76	; 0x4c
 8001b92:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d113      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x3a2>
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3354      	adds	r3, #84	; 0x54
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d108      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	f003 fc05 	bl	80053cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 fe82 	bl	80078d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be4:	461a      	mov	r2, r3
 8001be6:	2308      	movs	r3, #8
 8001be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c00:	461a      	mov	r2, r3
 8001c02:	2310      	movs	r3, #16
 8001c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2340      	movs	r3, #64	; 0x40
 8001c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d023      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2e:	6a38      	ldr	r0, [r7, #32]
 8001c30:	f002 fae6 	bl	8004200 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3338      	adds	r3, #56	; 0x38
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	78db      	ldrb	r3, [r3, #3]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f005 fecf 	bl	8007a00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2302      	movs	r3, #2
 8001c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fcdb 	bl	800263c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f af2e 	bne.w	8001af6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fad0 	bl	8005244 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cae:	d122      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fec3 	bl	8002a64 <HAL_PCDEx_LPM_Callback>
 8001cde:	e002      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f005 fe6d 	bl	80079c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 faa2 	bl	8005244 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d0a:	d112      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d102      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 fe29 	bl	8007974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d30:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fa84 	bl	8005244 <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d46:	f040 80b7 	bne.w	8001eb8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2110      	movs	r1, #16
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fa4b 	bl	8004200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	e046      	b.n	8001dfe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d94:	0151      	lsls	r1, r2, #5
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	440a      	add	r2, r1
 8001d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db0:	461a      	mov	r2, r3
 8001db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001db6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc8:	0151      	lsls	r1, r2, #5
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	440a      	add	r2, r1
 8001dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de8:	0151      	lsls	r1, r2, #5
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	440a      	add	r2, r1
 8001dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001df6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3b3      	bcc.n	8001d70 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d016      	beq.n	8001e52 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e34:	f043 030b 	orr.w	r3, r3, #11
 8001e38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e4a:	f043 030b 	orr.w	r3, r3, #11
 8001e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e50:	e015      	b.n	8001e7e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e78:	f043 030b 	orr.w	r3, r3, #11
 8001e7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f003 fa92 	bl	80053cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f9c1 	bl	8005244 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ecc:	d124      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fa57 	bl	8005386 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fa0c 	bl	80042fa <USB_GetDevSpeed>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681c      	ldr	r4, [r3, #0]
 8001eee:	f001 fa29 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8001ef2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4620      	mov	r0, r4
 8001efe:	f001 ff0b 	bl	8003d18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f005 fd0d 	bl	8007922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f991 	bl	8005244 <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d10a      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f005 fcea 	bl	8007906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f002 0208 	and.w	r2, r2, #8
 8001f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 f97c 	bl	8005244 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	d122      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f62:	2301      	movs	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e014      	b.n	8001f92 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4619      	mov	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fb27 	bl	80025da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3301      	adds	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3e5      	bcc.n	8001f68 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 f94f 	bl	8005244 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fb0:	d13b      	bne.n	800202a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e02b      	b.n	8002010 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3340      	adds	r3, #64	; 0x40
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d115      	bne.n	800200a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da12      	bge.n	800200a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	333f      	adds	r3, #63	; 0x3f
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fae8 	bl	80025da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3301      	adds	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002016:	429a      	cmp	r2, r3
 8002018:	d3ce      	bcc.n	8001fb8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 f908 	bl	8005244 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800203e:	d155      	bne.n	80020ec <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002040:	2301      	movs	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
 8002044:	e045      	b.n	80020d2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d12e      	bne.n	80020cc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800206e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	da2b      	bge.n	80020cc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002080:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002084:	429a      	cmp	r2, r3
 8002086:	d121      	bne.n	80020cc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c8:	6053      	str	r3, [r2, #4]
            break;
 80020ca:	e007      	b.n	80020dc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3301      	adds	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3b4      	bcc.n	8002046 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 f8a7 	bl	8005244 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d10a      	bne.n	8002118 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f005 fc8e 	bl	8007a24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f891 	bl	8005244 <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b04      	cmp	r3, #4
 800212a:	d115      	bne.n	8002158 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f005 fc7e 	bl	8007a40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e000      	b.n	8002158 <HAL_PCD_IRQHandler+0x938>
      return;
 8002156:	bf00      	nop
    }
  }
}
 8002158:	3734      	adds	r7, #52	; 0x34
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}

0800215e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_SetAddress+0x1a>
 8002174:	2302      	movs	r3, #2
 8002176:	e013      	b.n	80021a0 <HAL_PCD_SetAddress+0x42>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ffef 	bl	8005174 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	70fb      	strb	r3, [r7, #3]
 80021ba:	460b      	mov	r3, r1
 80021bc:	803b      	strh	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da0f      	bge.n	80021ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	705a      	strb	r2, [r3, #1]
 80021ec:	e00f      	b.n	800220e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800221a:	883a      	ldrh	r2, [r7, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	78ba      	ldrb	r2, [r7, #2]
 8002224:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002238:	78bb      	ldrb	r3, [r7, #2]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d102      	bne.n	8002244 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_PCD_EP_Open+0xaa>
 800224e:	2302      	movs	r3, #2
 8002250:	e00e      	b.n	8002270 <HAL_PCD_EP_Open+0xc8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 f86f 	bl	8004344 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800226e:	7afb      	ldrb	r3, [r7, #11]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da0f      	bge.n	80022ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	3338      	adds	r3, #56	; 0x38
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	705a      	strb	r2, [r3, #1]
 80022aa:	e00f      	b.n	80022cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_PCD_EP_Close+0x6e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00e      	b.n	8002304 <HAL_PCD_EP_Close+0x8c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 f8ad 	bl	8004454 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	460b      	mov	r3, r1
 800231a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	f003 020f 	and.w	r2, r3, #15
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234e:	7afb      	ldrb	r3, [r7, #11]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	b2da      	uxtb	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6979      	ldr	r1, [r7, #20]
 8002380:	f002 fb8c 	bl	8004a9c <USB_EP0StartXfer>
 8002384:	e008      	b.n	8002398 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	f002 f93a 	bl	800460c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 020f 	and.w	r2, r3, #15
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80023c4:	681b      	ldr	r3, [r3, #0]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	460b      	mov	r3, r1
 80023e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e2:	7afb      	ldrb	r3, [r7, #11]
 80023e4:	f003 020f 	and.w	r2, r3, #15
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2201      	movs	r2, #1
 8002410:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2da      	uxtb	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6979      	ldr	r1, [r7, #20]
 8002444:	f002 fb2a 	bl	8004a9c <USB_EP0StartXfer>
 8002448:	e008      	b.n	800245c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6979      	ldr	r1, [r7, #20]
 8002458:	f002 f8d8 	bl	800460c <USB_EPStartXfer>
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d901      	bls.n	8002484 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e050      	b.n	8002526 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002488:	2b00      	cmp	r3, #0
 800248a:	da0f      	bge.n	80024ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3338      	adds	r3, #56	; 0x38
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	705a      	strb	r2, [r3, #1]
 80024aa:	e00d      	b.n	80024c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_EP_SetStall+0x82>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e01e      	b.n	8002526 <HAL_PCD_EP_SetStall+0xc0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fd68 	bl	8004fcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	b2d9      	uxtb	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002516:	461a      	mov	r2, r3
 8002518:	f002 ff58 	bl	80053cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d901      	bls.n	800254c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e042      	b.n	80025d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800254c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da0f      	bge.n	8002574 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 020f 	and.w	r2, r3, #15
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3338      	adds	r3, #56	; 0x38
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
 8002572:	e00f      	b.n	8002594 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 020f 	and.w	r2, r3, #15
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_EP_ClrStall+0x86>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e00e      	b.n	80025d2 <HAL_PCD_EP_ClrStall+0xa4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fd70 	bl	80050a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da0c      	bge.n	8002608 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	3338      	adds	r3, #56	; 0x38
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	3304      	adds	r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e00c      	b.n	8002622 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 020f 	and.w	r2, r3, #15
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fb8f 	bl	8004d4c <USB_EPStopXfer>
 800262e:	4603      	mov	r3, r0
 8002630:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002632:	7afb      	ldrb	r3, [r7, #11]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3338      	adds	r3, #56	; 0x38
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	3304      	adds	r3, #4
 8002662:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d901      	bls.n	8002674 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e06c      	b.n	800274e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	429a      	cmp	r2, r3
 8002688:	d902      	bls.n	8002690 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3303      	adds	r3, #3
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002698:	e02b      	b.n	80026f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d902      	bls.n	80026b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3303      	adds	r3, #3
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4603      	mov	r3, r0
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	f002 fbe3 	bl	8004ea0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	441a      	add	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	441a      	add	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d809      	bhi.n	800271c <PCD_WriteEmptyTxFifo+0xe0>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002710:	429a      	cmp	r2, r3
 8002712:	d203      	bcs.n	800271c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1be      	bne.n	800269a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	429a      	cmp	r2, r3
 8002726:	d811      	bhi.n	800274c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	2201      	movs	r2, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	43db      	mvns	r3, r3
 8002742:	6939      	ldr	r1, [r7, #16]
 8002744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002748:	4013      	ands	r3, r2
 800274a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	333c      	adds	r3, #60	; 0x3c
 8002770:	3304      	adds	r3, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d17b      	bne.n	8002886 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	4a61      	ldr	r2, [pc, #388]	; (8002920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	f240 80b9 	bls.w	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80b3 	beq.w	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c0:	6093      	str	r3, [r2, #8]
 80027c2:	e0a7      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	2320      	movs	r3, #32
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	e098      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8093 	bne.w	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d90f      	bls.n	8002816 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	e07e      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	440b      	add	r3, r1
 8002838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d114      	bne.n	8002878 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002860:	461a      	mov	r2, r3
 8002862:	2101      	movs	r1, #1
 8002864:	f002 fdb2 	bl	80053cc <USB_EP0_OutStart>
 8002868:	e006      	b.n	8002878 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	441a      	add	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f005 f80c 	bl	800789c <HAL_PCD_DataOutStageCallback>
 8002884:	e046      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d124      	bne.n	80028d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	6093      	str	r3, [r2, #8]
 80028ac:	e032      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2320      	movs	r3, #32
 80028c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f004 ffe3 	bl	800789c <HAL_PCD_DataOutStageCallback>
 80028d6:	e01d      	b.n	8002914 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d114      	bne.n	8002908 <PCD_EP_OutXfrComplete_int+0x1b0>
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002900:	461a      	mov	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f002 fd62 	bl	80053cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f004 ffc4 	bl	800789c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	4f54300a 	.word	0x4f54300a
 8002924:	4f54310a 	.word	0x4f54310a

08002928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	333c      	adds	r3, #60	; 0x3c
 8002940:	3304      	adds	r3, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d90e      	bls.n	800297c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f004 ff7b 	bl	8007878 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d90c      	bls.n	80029a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800299c:	461a      	mov	r2, r3
 800299e:	2101      	movs	r1, #1
 80029a0:	f002 fd14 	bl	80053cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	4f54300a 	.word	0x4f54300a

080029b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
 80029c0:	4613      	mov	r3, r2
 80029c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029d2:	883b      	ldrh	r3, [r7, #0]
 80029d4:	0419      	lsls	r1, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	430a      	orrs	r2, r1
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
 80029e0:	e028      	b.n	8002a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	4413      	add	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e00d      	b.n	8002a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3340      	adds	r3, #64	; 0x40
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4413      	add	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3ec      	bcc.n	80029f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a1c:	883b      	ldrh	r3, [r7, #0]
 8002a1e:	0418      	lsls	r0, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	4302      	orrs	r2, r0
 8002a2c:	3340      	adds	r3, #64	; 0x40
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e267      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d075      	beq.n	8002b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa6:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d112      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab2:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d05b      	beq.n	8002b84 <HAL_RCC_OscConfig+0x108>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d157      	bne.n	8002b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e242      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x74>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x98>
 8002afa:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6f      	ldr	r2, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002b14:	4b69      	ldr	r3, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f8c6 	bl	8000cc4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f8c2 	bl	8000cc4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e207      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe f8b2 	bl	8000cc4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe f8ae 	bl	8000cc4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1f3      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0xe8>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002baa:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x152>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1c7      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCC_OscConfig+0x244>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f867 	bl	8000cc4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe f863 	bl	8000cc4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1a8      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4925      	ldr	r1, [pc, #148]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x244>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe f846 	bl	8000cc4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe f842 	bl	8000cc4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e187      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d036      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0x248>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe f826 	bl	8000cc4 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe f822 	bl	8000cc4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e167      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x200>
 8002c9a:	e01b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_OscConfig+0x248>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe f80f 	bl	8000cc4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e00e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe f80b 	bl	8000cc4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d907      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e150      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ea      	bne.n	8002caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8097 	beq.w	8002e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a7c      	ldr	r2, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d118      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1e:	4b74      	ldr	r3, [pc, #464]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a73      	ldr	r2, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2a:	f7fd ffcb 	bl	8000cc4 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fd ffc7 	bl	8000cc4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e10c      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2ea>
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a63      	ldr	r2, [pc, #396]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x324>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x30c>
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x324>
 8002d88:	4b58      	ldr	r3, [pc, #352]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd ff8c 	bl	8000cc4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fd ff88 	bl	8000cc4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0cb      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	4b49      	ldr	r3, [pc, #292]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <HAL_RCC_OscConfig+0x334>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fd ff76 	bl	8000cc4 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fd ff72 	bl	8000cc4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0b5      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a1 	beq.w	8002f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d05c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d141      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fd ff46 	bl	8000cc4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fd ff42 	bl	8000cc4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e087      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	491b      	ldr	r1, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fd ff1b 	bl	8000cc4 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fd ff17 	bl	8000cc4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e05c      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x416>
 8002eb0:	e054      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd ff04 	bl	8000cc4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fd ff00 	bl	8000cc4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e045      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x444>
 8002ede:	e03d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e038      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4ec>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d028      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0cc      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d90c      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d044      	beq.n	800308c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d119      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d003      	beq.n	800302a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003026:	2b03      	cmp	r3, #3
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e067      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 0203 	bic.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4934      	ldr	r1, [pc, #208]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800305c:	f7fd fe32 	bl	8000cc4 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fd fe2e 	bl	8000cc4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e04f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 020c 	and.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	429a      	cmp	r2, r3
 800308a:	d1eb      	bne.n	8003064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d20c      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fd92 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	08007eb0 	.word	0x08007eb0
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b094      	sub	sp, #80	; 0x50
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	2300      	movs	r3, #0
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80e1 	bhi.w	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e0db      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b73      	ldr	r3, [pc, #460]	; (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003170:	e0db      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b73      	ldr	r3, [pc, #460]	; (8003340 <HAL_RCC_GetSysClockFreq+0x208>)
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003176:	e0d8      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003182:	4b6d      	ldr	r3, [pc, #436]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
 8003198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
 80031a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4621      	mov	r1, r4
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	6139      	str	r1, [r7, #16]
 80031c8:	4629      	mov	r1, r5
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	ebb2 0801 	subs.w	r8, r2, r1
 80031f0:	4659      	mov	r1, fp
 80031f2:	eb63 0901 	sbc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	462b      	mov	r3, r5
 8003218:	eb49 0303 	adc.w	r3, r9, r3
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800322a:	4629      	mov	r1, r5
 800322c:	024b      	lsls	r3, r1, #9
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003234:	4621      	mov	r1, r4
 8003236:	024a      	lsls	r2, r1, #9
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003248:	f7fc ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003254:	e058      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b38      	ldr	r3, [pc, #224]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	2200      	movs	r2, #0
 800325e:	4618      	mov	r0, r3
 8003260:	4611      	mov	r1, r2
 8003262:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0159      	lsls	r1, r3, #5
 800327e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003282:	0150      	lsls	r0, r2, #5
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4641      	mov	r1, r8
 800328a:	ebb2 0a01 	subs.w	sl, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb63 0b01 	sbc.w	fp, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a8:	ebb2 040a 	subs.w	r4, r2, sl
 80032ac:	eb63 050b 	sbc.w	r5, r3, fp
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb45 0303 	adc.w	r3, r5, r3
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032de:	4629      	mov	r1, r5
 80032e0:	028b      	lsls	r3, r1, #10
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e8:	4621      	mov	r1, r4
 80032ea:	028a      	lsls	r2, r1, #10
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f2:	2200      	movs	r2, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	61fa      	str	r2, [r7, #28]
 80032f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fc:	f7fc ff64 	bl	80001c8 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800332c:	4618      	mov	r0, r3
 800332e:	3750      	adds	r7, #80	; 0x50
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	00f42400 	.word	0x00f42400
 8003340:	007a1200 	.word	0x007a1200

08003344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_RCC_GetHCLKFreq+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003360:	f7ff fff0 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	08007ec0 	.word	0x08007ec0

08003384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07b      	b.n	800348e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a6:	d009      	beq.n	80033bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
 80033ae:	e005      	b.n	80033bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd fb22 	bl	8000a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	ea42 0103 	orr.w	r1, r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0104 	and.w	r1, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0210 	and.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
    return;
 80034d6:	e0ce      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_SPI_IRQHandler+0x5e>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
    return;
 80034f4:	e0bf      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_SPI_IRQHandler+0x7e>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b0 	beq.w	8003676 <HAL_SPI_IRQHandler+0x1de>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80aa 	beq.w	8003676 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d023      	beq.n	8003574 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b03      	cmp	r3, #3
 8003536:	d011      	beq.n	800355c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	e00b      	b.n	8003574 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
        return;
 8003572:	e080      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d014      	beq.n	80035a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0208 	orr.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04f      	beq.n	8003674 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_SPI_IRQHandler+0x168>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d034      	beq.n	800366a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0203 	bic.w	r2, r2, #3
 800360e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_SPI_IRQHandler+0x1e4>)
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fc8e 	bl	8000f46 <HAL_DMA_Abort_IT>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_SPI_IRQHandler+0x1e4>)
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fc78 	bl	8000f46 <HAL_DMA_Abort_IT>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003668:	e003      	b.n	8003672 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f808 	bl	8003680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003670:	e000      	b.n	8003674 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003672:	bf00      	nop
    return;
 8003674:	bf00      	nop
  }
}
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	08003695 	.word	0x08003695

08003680 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff ffe6 	bl	8003680 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f9ec 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 f8f4 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_TIM_ConfigClockSource+0x1c>
 8003772:	2302      	movs	r3, #2
 8003774:	e0b4      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x186>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003794:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d03e      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xd4>
 80037b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b4:	f200 8087 	bhi.w	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	f000 8086 	beq.w	80038cc <HAL_TIM_ConfigClockSource+0x172>
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c4:	d87f      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037c6:	2b70      	cmp	r3, #112	; 0x70
 80037c8:	d01a      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0xa6>
 80037ca:	2b70      	cmp	r3, #112	; 0x70
 80037cc:	d87b      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037ce:	2b60      	cmp	r3, #96	; 0x60
 80037d0:	d050      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x11a>
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d877      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037d6:	2b50      	cmp	r3, #80	; 0x50
 80037d8:	d03c      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0xfa>
 80037da:	2b50      	cmp	r3, #80	; 0x50
 80037dc:	d873      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d058      	beq.n	8003894 <HAL_TIM_ConfigClockSource+0x13a>
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d86f      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037e6:	2b30      	cmp	r3, #48	; 0x30
 80037e8:	d064      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x15a>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d86b      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d060      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x15a>
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d867      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d05c      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x15a>
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d05a      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0x15a>
 80037fe:	e062      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f000 f984 	bl	8003b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003822:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e04f      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f000 f96d 	bl	8003b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003850:	609a      	str	r2, [r3, #8]
      break;
 8003852:	e03c      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	461a      	mov	r2, r3
 8003862:	f000 f8e1 	bl	8003a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2150      	movs	r1, #80	; 0x50
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f93a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003872:	e02c      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	461a      	mov	r2, r3
 8003882:	f000 f900 	bl	8003a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2160      	movs	r1, #96	; 0x60
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f92a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003892:	e01c      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f000 f8c1 	bl	8003a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f91a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80038b2:	e00c      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 f911 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80038c4:	e003      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d027      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0x134>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_Base_SetConfig+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_Base_SetConfig+0x13c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0210 	bic.w	r2, r3, #16
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e05a      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d01d      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40001800 	.word	0x40001800

08003c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c54:	b084      	sub	sp, #16
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	f107 001c 	add.w	r0, r7, #28
 8003c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d122      	bne.n	8003cb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f001 fbee 	bl	8005488 <USB_CoreReset>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e01a      	b.n	8003ce8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fbe2 	bl	8005488 <USB_CoreReset>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cda:	e005      	b.n	8003ce8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10b      	bne.n	8003d06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f043 0206 	orr.w	r2, r3, #6
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d12:	b004      	add	sp, #16
 8003d14:	4770      	bx	lr
	...

08003d18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d165      	bne.n	8003df8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <USB_SetTurnaroundTime+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d906      	bls.n	8003d42 <USB_SetTurnaroundTime+0x2a>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <USB_SetTurnaroundTime+0x120>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d202      	bcs.n	8003d42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d3c:	230f      	movs	r3, #15
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e062      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <USB_SetTurnaroundTime+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d306      	bcc.n	8003d58 <USB_SetTurnaroundTime+0x40>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <USB_SetTurnaroundTime+0x124>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d202      	bcs.n	8003d58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d52:	230e      	movs	r3, #14
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e057      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <USB_SetTurnaroundTime+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d306      	bcc.n	8003d6e <USB_SetTurnaroundTime+0x56>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a37      	ldr	r2, [pc, #220]	; (8003e40 <USB_SetTurnaroundTime+0x128>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d202      	bcs.n	8003d6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d68:	230d      	movs	r3, #13
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e04c      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <USB_SetTurnaroundTime+0x128>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d306      	bcc.n	8003d84 <USB_SetTurnaroundTime+0x6c>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <USB_SetTurnaroundTime+0x12c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d802      	bhi.n	8003d84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d7e:	230c      	movs	r3, #12
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e041      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <USB_SetTurnaroundTime+0x12c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d906      	bls.n	8003d9a <USB_SetTurnaroundTime+0x82>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	; (8003e48 <USB_SetTurnaroundTime+0x130>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d802      	bhi.n	8003d9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d94:	230b      	movs	r3, #11
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e036      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <USB_SetTurnaroundTime+0x130>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d906      	bls.n	8003db0 <USB_SetTurnaroundTime+0x98>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <USB_SetTurnaroundTime+0x134>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d802      	bhi.n	8003db0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003daa:	230a      	movs	r3, #10
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e02b      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <USB_SetTurnaroundTime+0x134>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d906      	bls.n	8003dc6 <USB_SetTurnaroundTime+0xae>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a25      	ldr	r2, [pc, #148]	; (8003e50 <USB_SetTurnaroundTime+0x138>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d202      	bcs.n	8003dc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003dc0:	2309      	movs	r3, #9
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e020      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <USB_SetTurnaroundTime+0x138>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d306      	bcc.n	8003ddc <USB_SetTurnaroundTime+0xc4>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	; (8003e54 <USB_SetTurnaroundTime+0x13c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d802      	bhi.n	8003ddc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e015      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <USB_SetTurnaroundTime+0x13c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d906      	bls.n	8003df2 <USB_SetTurnaroundTime+0xda>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <USB_SetTurnaroundTime+0x140>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d202      	bcs.n	8003df2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dec:	2307      	movs	r3, #7
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e00a      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003df2:	2306      	movs	r3, #6
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e007      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dfe:	2309      	movs	r3, #9
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e001      	b.n	8003e08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e04:	2309      	movs	r3, #9
 8003e06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	029b      	lsls	r3, r3, #10
 8003e1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	00d8acbf 	.word	0x00d8acbf
 8003e38:	00e4e1c0 	.word	0x00e4e1c0
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	01067380 	.word	0x01067380
 8003e44:	011a499f 	.word	0x011a499f
 8003e48:	01312cff 	.word	0x01312cff
 8003e4c:	014ca43f 	.word	0x014ca43f
 8003e50:	016e3600 	.word	0x016e3600
 8003e54:	01a6ab1f 	.word	0x01a6ab1f
 8003e58:	01e84800 	.word	0x01e84800

08003e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d115      	bne.n	8003eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f7fc ff04 	bl	8000cdc <HAL_Delay>
      ms++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 fa45 	bl	800536a <USB_GetMode>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d01e      	beq.n	8003f24 <USB_SetCurrentMode+0x84>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b31      	cmp	r3, #49	; 0x31
 8003eea:	d9f0      	bls.n	8003ece <USB_SetCurrentMode+0x2e>
 8003eec:	e01a      	b.n	8003f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d115      	bne.n	8003f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7fc feeb 	bl	8000cdc <HAL_Delay>
      ms++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f001 fa2c 	bl	800536a <USB_GetMode>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <USB_SetCurrentMode+0x84>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b31      	cmp	r3, #49	; 0x31
 8003f1c:	d9f0      	bls.n	8003f00 <USB_SetCurrentMode+0x60>
 8003f1e:	e001      	b.n	8003f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e005      	b.n	8003f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b32      	cmp	r3, #50	; 0x32
 8003f28:	d101      	bne.n	8003f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f38:	b084      	sub	sp, #16
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	e009      	b.n	8003f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3340      	adds	r3, #64	; 0x40
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b0e      	cmp	r3, #14
 8003f70:	d9f2      	bls.n	8003f58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11c      	bne.n	8003fb2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb0:	e00b      	b.n	8003fca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	680b      	ldr	r3, [r1, #0]
 8003fe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10c      	bne.n	800400a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f965 	bl	80042c8 <USB_SetDevSpeed>
 8003ffe:	e008      	b.n	8004012 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004000:	2101      	movs	r1, #1
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f960 	bl	80042c8 <USB_SetDevSpeed>
 8004008:	e003      	b.n	8004012 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800400a:	2103      	movs	r1, #3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f95b 	bl	80042c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004012:	2110      	movs	r1, #16
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8f3 	bl	8004200 <USB_FlushTxFifo>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f91f 	bl	8004268 <USB_FlushRxFifo>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	461a      	mov	r2, r3
 800403c:	2300      	movs	r3, #0
 800403e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	461a      	mov	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	461a      	mov	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e043      	b.n	80040e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004074:	d118      	bne.n	80040a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	461a      	mov	r2, r3
 800408a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e013      	b.n	80040ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409e:	461a      	mov	r2, r3
 80040a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e008      	b.n	80040ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	461a      	mov	r2, r3
 80040da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3301      	adds	r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3b7      	bcc.n	800405e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e043      	b.n	800417c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800410a:	d118      	bne.n	800413e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e013      	b.n	8004150 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e008      	b.n	8004150 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3301      	adds	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3b7      	bcc.n	80040f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f043 0210 	orr.w	r2, r3, #16
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699a      	ldr	r2, [r3, #24]
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <USB_DevInit+0x2c4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f043 0208 	orr.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f8:	b004      	add	sp, #16
 80041fa:	4770      	bx	lr
 80041fc:	803c3800 	.word	0x803c3800

08004200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <USB_FlushTxFifo+0x64>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e01b      	b.n	8004258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	daf2      	bge.n	800420e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a08      	ldr	r2, [pc, #32]	; (8004264 <USB_FlushTxFifo+0x64>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e006      	b.n	8004258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b20      	cmp	r3, #32
 8004254:	d0f0      	beq.n	8004238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	00030d40 	.word	0x00030d40

08004268 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <USB_FlushRxFifo+0x5c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e018      	b.n	80042b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	daf2      	bge.n	8004274 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2210      	movs	r2, #16
 8004296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <USB_FlushRxFifo+0x5c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e006      	b.n	80042b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d0f0      	beq.n	8004298 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	00030d40 	.word	0x00030d40

080042c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0306 	and.w	r3, r3, #6
 8004312:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]
 800431e:	e00a      	b.n	8004336 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d002      	beq.n	800432c <USB_GetDevSpeed+0x32>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d102      	bne.n	8004332 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800432c:	2302      	movs	r3, #2
 800432e:	75fb      	strb	r3, [r7, #23]
 8004330:	e001      	b.n	8004336 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004332:	230f      	movs	r3, #15
 8004334:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004336:	7dfb      	ldrb	r3, [r7, #23]
}
 8004338:	4618      	mov	r0, r3
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d13a      	bne.n	80043d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	b29b      	uxth	r3, r3
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437e:	4313      	orrs	r3, r2
 8004380:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d155      	bne.n	8004444 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	791b      	ldrb	r3, [r3, #4]
 80043b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	059b      	lsls	r3, r3, #22
 80043ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043bc:	4313      	orrs	r3, r2
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e036      	b.n	8004444 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d11a      	bne.n	8004444 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800442a:	430b      	orrs	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d161      	bne.n	8004534 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004486:	d11f      	bne.n	80044c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	b29b      	uxth	r3, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e8:	4013      	ands	r3, r2
 80044ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2101      	movs	r1, #1
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450c:	4013      	ands	r3, r2
 800450e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	0159      	lsls	r1, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	440b      	add	r3, r1
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	4619      	mov	r1, r3
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <USB_DeactivateEndpoint+0x1b0>)
 800452e:	4013      	ands	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	e060      	b.n	80045f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454a:	d11f      	bne.n	800458c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800456a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	43db      	mvns	r3, r3
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ac:	4013      	ands	r3, r2
 80045ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d0:	4013      	ands	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0159      	lsls	r1, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	440b      	add	r3, r1
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	4619      	mov	r1, r3
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <USB_DeactivateEndpoint+0x1b4>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	ec337800 	.word	0xec337800
 8004608:	eff37800 	.word	0xeff37800

0800460c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b01      	cmp	r3, #1
 800462a:	f040 815c 	bne.w	80048e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d132      	bne.n	800469c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004694:	0cdb      	lsrs	r3, r3, #19
 8004696:	04db      	lsls	r3, r3, #19
 8004698:	6113      	str	r3, [r2, #16]
 800469a:	e074      	b.n	8004786 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	0cdb      	lsrs	r3, r3, #19
 80046b8:	04db      	lsls	r3, r3, #19
 80046ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6999      	ldr	r1, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	440b      	add	r3, r1
 80046f8:	1e59      	subs	r1, r3, #1
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004702:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004704:	4b9d      	ldr	r3, [pc, #628]	; (800497c <USB_EPStartXfer+0x370>)
 8004706:	400b      	ands	r3, r1
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	0148      	lsls	r0, r1, #5
 800470c:	69f9      	ldr	r1, [r7, #28]
 800470e:	4401      	add	r1, r0
 8004710:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004714:	4313      	orrs	r3, r2
 8004716:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	0148      	lsls	r0, r1, #5
 8004732:	69f9      	ldr	r1, [r7, #28]
 8004734:	4401      	add	r1, r0
 8004736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	791b      	ldrb	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d11f      	bne.n	8004786 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004760:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004764:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004784:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d14b      	bne.n	8004824 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	791b      	ldrb	r3, [r3, #4]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d128      	bne.n	8004802 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d110      	bne.n	80047e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e00f      	b.n	8004802 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e133      	b.n	8004a8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004842:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d015      	beq.n	8004878 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 811b 	beq.w	8004a8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004872:	4313      	orrs	r3, r2
 8004874:	634b      	str	r3, [r1, #52]	; 0x34
 8004876:	e109      	b.n	8004a8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d110      	bne.n	80048aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e00f      	b.n	80048ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6919      	ldr	r1, [r3, #16]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	b298      	uxth	r0, r3
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4603      	mov	r3, r0
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fade 	bl	8004ea0 <USB_WritePacket>
 80048e4:	e0d2      	b.n	8004a8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004900:	0cdb      	lsrs	r3, r3, #19
 8004902:	04db      	lsls	r3, r3, #19
 8004904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004928:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d126      	bne.n	8004980 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	0148      	lsls	r0, r1, #5
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	4401      	add	r1, r0
 8004950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004976:	6113      	str	r3, [r2, #16]
 8004978:	e03a      	b.n	80049f0 <USB_EPStartXfer+0x3e4>
 800497a:	bf00      	nop
 800497c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4413      	add	r3, r2
 800498a:	1e5a      	subs	r2, r3, #1
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	8afa      	ldrh	r2, [r7, #22]
 800499c:	fb03 f202 	mul.w	r2, r3, r2
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	8afb      	ldrh	r3, [r7, #22]
 80049b4:	04d9      	lsls	r1, r3, #19
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <USB_EPStartXfer+0x48c>)
 80049b8:	400b      	ands	r3, r1
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	0148      	lsls	r0, r1, #5
 80049be:	69f9      	ldr	r1, [r7, #28]
 80049c0:	4401      	add	r1, r0
 80049c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049c6:	4313      	orrs	r3, r2
 80049c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	0148      	lsls	r0, r1, #5
 80049e4:	69f9      	ldr	r1, [r7, #28]
 80049e6:	4401      	add	r1, r0
 80049e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10d      	bne.n	8004a12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	460a      	mov	r2, r1
 8004a10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	791b      	ldrb	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d128      	bne.n	8004a6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d110      	bne.n	8004a4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00f      	b.n	8004a6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	1ff80000 	.word	0x1ff80000

08004a9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 80ce 	bne.w	8004c5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d132      	bne.n	8004b2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b24:	0cdb      	lsrs	r3, r3, #19
 8004b26:	04db      	lsls	r3, r3, #19
 8004b28:	6113      	str	r3, [r2, #16]
 8004b2a:	e04e      	b.n	8004bca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	0cdb      	lsrs	r3, r3, #19
 8004b48:	04db      	lsls	r3, r3, #19
 8004b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d903      	bls.n	8004b84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	0148      	lsls	r0, r1, #5
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	4401      	add	r1, r0
 8004bc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d11e      	bne.n	8004c0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	461a      	mov	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e097      	b.n	8004d3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8083 	beq.w	8004d3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c54:	4313      	orrs	r3, r2
 8004c56:	634b      	str	r3, [r1, #52]	; 0x34
 8004c58:	e071      	b.n	8004d3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c74:	0cdb      	lsrs	r3, r3, #19
 8004c76:	04db      	lsls	r3, r3, #19
 8004c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	0148      	lsls	r0, r1, #5
 8004cf0:	6979      	ldr	r1, [r7, #20]
 8004cf2:	4401      	add	r1, r0
 8004cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10d      	bne.n	8004d1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6919      	ldr	r1, [r3, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d14a      	bne.n	8004e00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d82:	f040 8086 	bne.w	8004e92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d902      	bls.n	8004de4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
          break;
 8004de2:	e056      	b.n	8004e92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfc:	d0e7      	beq.n	8004dce <USB_EPStopXfer+0x82>
 8004dfe:	e048      	b.n	8004e92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e18:	d13b      	bne.n	8004e92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d902      	bls.n	8004e78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
          break;
 8004e76:	e00c      	b.n	8004e92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e90:	d0e7      	beq.n	8004e62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	460b      	mov	r3, r1
 8004eb0:	71fb      	strb	r3, [r7, #7]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d123      	bne.n	8004f0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ec6:	88bb      	ldrh	r3, [r7, #4]
 8004ec8:	3303      	adds	r3, #3
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e018      	b.n	8004f06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	031a      	lsls	r2, r3, #12
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d3e2      	bcc.n	8004ed4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3724      	adds	r7, #36	; 0x24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b08b      	sub	sp, #44	; 0x2c
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	089b      	lsrs	r3, r3, #2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	e014      	b.n	8004f72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	3301      	adds	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	3301      	adds	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	6a3a      	ldr	r2, [r7, #32]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3e6      	bcc.n	8004f48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f7a:	8bfb      	ldrh	r3, [r7, #30]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f107 0310 	add.w	r3, r7, #16
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	701a      	strb	r2, [r3, #0]
      i++;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	3301      	adds	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fb2:	8bfb      	ldrh	r3, [r7, #30]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fb8:	8bfb      	ldrh	r3, [r7, #30]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ea      	bne.n	8004f94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	372c      	adds	r7, #44	; 0x2c
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d12c      	bne.n	8005042 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	db12      	blt.n	8005020 <USB_EPSetStall+0x54>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00f      	beq.n	8005020 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800501e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e02b      	b.n	800509a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db12      	blt.n	800507a <USB_EPSetStall+0xae>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00f      	beq.n	800507a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005078:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005098:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d128      	bne.n	8005116 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	791b      	ldrb	r3, [r3, #4]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d003      	beq.n	80050f4 <USB_EPClearStall+0x4c>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	791b      	ldrb	r3, [r3, #4]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d138      	bne.n	8005166 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e027      	b.n	8005166 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005130:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005134:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d003      	beq.n	8005146 <USB_EPClearStall+0x9e>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d10f      	bne.n	8005166 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005164:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005196:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051a8:	68f9      	ldr	r1, [r7, #12]
 80051aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ee:	f023 0302 	bic.w	r3, r3, #2
 80051f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800521c:	f023 0303 	bic.w	r3, r3, #3
 8005220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	b29b      	uxth	r3, r3
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005300:	68bb      	ldr	r3, [r7, #8]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	fa22 f303 	lsr.w	r3, r2, r3
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	b2db      	uxtb	r3, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800535c:	68bb      	ldr	r3, [r7, #8]
}
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053a4:	f023 0307 	bic.w	r3, r3, #7
 80053a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	460b      	mov	r3, r1
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	333c      	adds	r3, #60	; 0x3c
 80053e2:	3304      	adds	r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4a26      	ldr	r2, [pc, #152]	; (8005484 <USB_EP0_OutStart+0xb8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d90a      	bls.n	8005406 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005400:	d101      	bne.n	8005406 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e037      	b.n	8005476 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f043 0318 	orr.w	r3, r3, #24
 8005438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800544c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10f      	bne.n	8005474 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	4f54300a 	.word	0x4f54300a

08005488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a13      	ldr	r2, [pc, #76]	; (80054ec <USB_CoreReset+0x64>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e01b      	b.n	80054de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	daf2      	bge.n	8005494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <USB_CoreReset+0x64>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d0f0      	beq.n	80054be <USB_CoreReset+0x36>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005500:	f002 fc36 	bl	8007d70 <USBD_static_malloc>
 8005504:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	32b0      	adds	r2, #176	; 0xb0
 8005516:	2100      	movs	r1, #0
 8005518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800551c:	2302      	movs	r3, #2
 800551e:	e0d4      	b.n	80056ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005520:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005524:	2100      	movs	r1, #0
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f002 fc66 	bl	8007df8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	32b0      	adds	r2, #176	; 0xb0
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	32b0      	adds	r2, #176	; 0xb0
 8005546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7c1b      	ldrb	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d138      	bne.n	80055ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005558:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <USBD_CDC_Init+0x1e4>)
 800555a:	7819      	ldrb	r1, [r3, #0]
 800555c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005560:	2202      	movs	r2, #2
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fae1 	bl	8007b2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005568:	4b5a      	ldr	r3, [pc, #360]	; (80056d4 <USBD_CDC_Init+0x1e4>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	2201      	movs	r2, #1
 8005580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005582:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558a:	2202      	movs	r2, #2
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f002 facc 	bl	8007b2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005592:	4b51      	ldr	r3, [pc, #324]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055aa:	2201      	movs	r2, #1
 80055ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <USBD_CDC_Init+0x1ec>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3326      	adds	r3, #38	; 0x26
 80055c4:	2210      	movs	r2, #16
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e035      	b.n	8005636 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055ca:	4b42      	ldr	r3, [pc, #264]	; (80056d4 <USBD_CDC_Init+0x1e4>)
 80055cc:	7819      	ldrb	r1, [r3, #0]
 80055ce:	2340      	movs	r3, #64	; 0x40
 80055d0:	2202      	movs	r2, #2
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f002 faa9 	bl	8007b2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055d8:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <USBD_CDC_Init+0x1e4>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3324      	adds	r3, #36	; 0x24
 80055ee:	2201      	movs	r2, #1
 80055f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 80055f4:	7819      	ldrb	r1, [r3, #0]
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	2202      	movs	r2, #2
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 fa95 	bl	8007b2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005600:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005618:	2201      	movs	r2, #1
 800561a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800561c:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <USBD_CDC_Init+0x1ec>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 020f 	and.w	r2, r3, #15
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	3326      	adds	r3, #38	; 0x26
 8005632:	2210      	movs	r2, #16
 8005634:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <USBD_CDC_Init+0x1ec>)
 8005638:	7819      	ldrb	r1, [r3, #0]
 800563a:	2308      	movs	r3, #8
 800563c:	2203      	movs	r2, #3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f002 fa73 	bl	8007b2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005644:	4b25      	ldr	r3, [pc, #148]	; (80056dc <USBD_CDC_Init+0x1ec>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3324      	adds	r3, #36	; 0x24
 800565a:	2201      	movs	r2, #1
 800565c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	33b0      	adds	r3, #176	; 0xb0
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005694:	2302      	movs	r3, #2
 8005696:	e018      	b.n	80056ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7c1b      	ldrb	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 80056a2:	7819      	ldrb	r1, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f002 fb2a 	bl	8007d08 <USBD_LL_PrepareReceive>
 80056b4:	e008      	b.n	80056c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <USBD_CDC_Init+0x1e8>)
 80056b8:	7819      	ldrb	r1, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f002 fb20 	bl	8007d08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000093 	.word	0x20000093
 80056d8:	20000094 	.word	0x20000094
 80056dc:	20000095 	.word	0x20000095

080056e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056ec:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <USBD_CDC_DeInit+0xf8>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f002 fa3f 	bl	8007b76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056f8:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <USBD_CDC_DeInit+0xf8>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f003 020f 	and.w	r2, r3, #15
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3324      	adds	r3, #36	; 0x24
 800570e:	2200      	movs	r2, #0
 8005710:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005712:	4b32      	ldr	r3, [pc, #200]	; (80057dc <USBD_CDC_DeInit+0xfc>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 fa2c 	bl	8007b76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800571e:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <USBD_CDC_DeInit+0xfc>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005736:	2200      	movs	r2, #0
 8005738:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <USBD_CDC_DeInit+0x100>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f002 fa18 	bl	8007b76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <USBD_CDC_DeInit+0x100>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f003 020f 	and.w	r2, r3, #15
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	2200      	movs	r2, #0
 800575e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <USBD_CDC_DeInit+0x100>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3326      	adds	r3, #38	; 0x26
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	32b0      	adds	r2, #176	; 0xb0
 8005784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01f      	beq.n	80057cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	33b0      	adds	r3, #176	; 0xb0
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32b0      	adds	r2, #176	; 0xb0
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 faec 	bl	8007d8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	2100      	movs	r1, #0
 80057c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000093 	.word	0x20000093
 80057dc:	20000094 	.word	0x20000094
 80057e0:	20000095 	.word	0x20000095

080057e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	32b0      	adds	r2, #176	; 0xb0
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e0bf      	b.n	8005994 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800581c:	2b00      	cmp	r3, #0
 800581e:	d050      	beq.n	80058c2 <USBD_CDC_Setup+0xde>
 8005820:	2b20      	cmp	r3, #32
 8005822:	f040 80af 	bne.w	8005984 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	88db      	ldrh	r3, [r3, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d03a      	beq.n	80058a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b25b      	sxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	da1b      	bge.n	8005870 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	33b0      	adds	r3, #176	; 0xb0
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800584e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	88d2      	ldrh	r2, [r2, #6]
 8005854:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	88db      	ldrh	r3, [r3, #6]
 800585a:	2b07      	cmp	r3, #7
 800585c:	bf28      	it	cs
 800585e:	2307      	movcs	r3, #7
 8005860:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	89fa      	ldrh	r2, [r7, #14]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 fd43 	bl	80072f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800586e:	e090      	b.n	8005992 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	785a      	ldrb	r2, [r3, #1]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	2b3f      	cmp	r3, #63	; 0x3f
 8005880:	d803      	bhi.n	800588a <USBD_CDC_Setup+0xa6>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	88db      	ldrh	r3, [r3, #6]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	e000      	b.n	800588c <USBD_CDC_Setup+0xa8>
 800588a:	2240      	movs	r2, #64	; 0x40
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800589a:	461a      	mov	r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fd55 	bl	800734c <USBD_CtlPrepareRx>
      break;
 80058a2:	e076      	b.n	8005992 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	33b0      	adds	r3, #176	; 0xb0
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	7850      	ldrb	r0, [r2, #1]
 80058ba:	2200      	movs	r2, #0
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	4798      	blx	r3
      break;
 80058c0:	e067      	b.n	8005992 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b0b      	cmp	r3, #11
 80058c8:	d851      	bhi.n	800596e <USBD_CDC_Setup+0x18a>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <USBD_CDC_Setup+0xec>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005901 	.word	0x08005901
 80058d4:	0800597d 	.word	0x0800597d
 80058d8:	0800596f 	.word	0x0800596f
 80058dc:	0800596f 	.word	0x0800596f
 80058e0:	0800596f 	.word	0x0800596f
 80058e4:	0800596f 	.word	0x0800596f
 80058e8:	0800596f 	.word	0x0800596f
 80058ec:	0800596f 	.word	0x0800596f
 80058f0:	0800596f 	.word	0x0800596f
 80058f4:	0800596f 	.word	0x0800596f
 80058f8:	0800592b 	.word	0x0800592b
 80058fc:	08005955 	.word	0x08005955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d107      	bne.n	800591c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800590c:	f107 030a 	add.w	r3, r7, #10
 8005910:	2202      	movs	r2, #2
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fced 	bl	80072f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800591a:	e032      	b.n	8005982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fc77 	bl	8007212 <USBD_CtlError>
            ret = USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	75fb      	strb	r3, [r7, #23]
          break;
 8005928:	e02b      	b.n	8005982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d107      	bne.n	8005946 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005936:	f107 030d 	add.w	r3, r7, #13
 800593a:	2201      	movs	r2, #1
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fcd8 	bl	80072f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005944:	e01d      	b.n	8005982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 fc62 	bl	8007212 <USBD_CtlError>
            ret = USBD_FAIL;
 800594e:	2303      	movs	r3, #3
 8005950:	75fb      	strb	r3, [r7, #23]
          break;
 8005952:	e016      	b.n	8005982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d00f      	beq.n	8005980 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fc55 	bl	8007212 <USBD_CtlError>
            ret = USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800596c:	e008      	b.n	8005980 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 fc4e 	bl	8007212 <USBD_CtlError>
          ret = USBD_FAIL;
 8005976:	2303      	movs	r3, #3
 8005978:	75fb      	strb	r3, [r7, #23]
          break;
 800597a:	e002      	b.n	8005982 <USBD_CDC_Setup+0x19e>
          break;
 800597c:	bf00      	nop
 800597e:	e008      	b.n	8005992 <USBD_CDC_Setup+0x1ae>
          break;
 8005980:	bf00      	nop
      }
      break;
 8005982:	e006      	b.n	8005992 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fc43 	bl	8007212 <USBD_CtlError>
      ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	75fb      	strb	r3, [r7, #23]
      break;
 8005990:	bf00      	nop
  }

  return (uint8_t)ret;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	32b0      	adds	r2, #176	; 0xb0
 80059ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e065      	b.n	8005a92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	32b0      	adds	r2, #176	; 0xb0
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3318      	adds	r3, #24
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02f      	beq.n	8005a50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3318      	adds	r3, #24
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 010f 	and.w	r1, r3, #15
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	440b      	add	r3, r1
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4403      	add	r3, r0
 8005a18:	3348      	adds	r3, #72	; 0x48
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d112      	bne.n	8005a50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a42:	78f9      	ldrb	r1, [r7, #3]
 8005a44:	2300      	movs	r3, #0
 8005a46:	2200      	movs	r2, #0
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f002 f93c 	bl	8007cc6 <USBD_LL_Transmit>
 8005a4e:	e01f      	b.n	8005a90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	33b0      	adds	r3, #176	; 0xb0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	33b0      	adds	r3, #176	; 0xb0
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	32b0      	adds	r2, #176	; 0xb0
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	32b0      	adds	r2, #176	; 0xb0
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e01a      	b.n	8005b02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f002 f93a 	bl	8007d4a <USBD_LL_GetRxDataSize>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	33b0      	adds	r3, #176	; 0xb0
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005afc:	4611      	mov	r1, r2
 8005afe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	32b0      	adds	r2, #176	; 0xb0
 8005b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e025      	b.n	8005b78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	33b0      	adds	r3, #176	; 0xb0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <USBD_CDC_EP0_RxReady+0x6c>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b46:	2bff      	cmp	r3, #255	; 0xff
 8005b48:	d015      	beq.n	8005b76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	33b0      	adds	r3, #176	; 0xb0
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b88:	2182      	movs	r1, #130	; 0x82
 8005b8a:	4818      	ldr	r0, [pc, #96]	; (8005bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b8c:	f000 fd09 	bl	80065a2 <USBD_GetEpDesc>
 8005b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b92:	2101      	movs	r1, #1
 8005b94:	4815      	ldr	r0, [pc, #84]	; (8005bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b96:	f000 fd04 	bl	80065a2 <USBD_GetEpDesc>
 8005b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b9c:	2181      	movs	r1, #129	; 0x81
 8005b9e:	4813      	ldr	r0, [pc, #76]	; (8005bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ba0:	f000 fcff 	bl	80065a2 <USBD_GetEpDesc>
 8005ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc0:	711a      	strb	r2, [r3, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd4:	711a      	strb	r2, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2243      	movs	r2, #67	; 0x43
 8005bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005be0:	4b02      	ldr	r3, [pc, #8]	; (8005bec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000050 	.word	0x20000050

08005bf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf8:	2182      	movs	r1, #130	; 0x82
 8005bfa:	4818      	ldr	r0, [pc, #96]	; (8005c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bfc:	f000 fcd1 	bl	80065a2 <USBD_GetEpDesc>
 8005c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c02:	2101      	movs	r1, #1
 8005c04:	4815      	ldr	r0, [pc, #84]	; (8005c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c06:	f000 fccc 	bl	80065a2 <USBD_GetEpDesc>
 8005c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c0c:	2181      	movs	r1, #129	; 0x81
 8005c0e:	4813      	ldr	r0, [pc, #76]	; (8005c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c10:	f000 fcc7 	bl	80065a2 <USBD_GetEpDesc>
 8005c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2210      	movs	r2, #16
 8005c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	711a      	strb	r2, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f042 0202 	orr.w	r2, r2, #2
 8005c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	711a      	strb	r2, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f042 0202 	orr.w	r2, r2, #2
 8005c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2243      	movs	r2, #67	; 0x43
 8005c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000050 	.word	0x20000050

08005c60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c68:	2182      	movs	r1, #130	; 0x82
 8005c6a:	4818      	ldr	r0, [pc, #96]	; (8005ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c6c:	f000 fc99 	bl	80065a2 <USBD_GetEpDesc>
 8005c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c72:	2101      	movs	r1, #1
 8005c74:	4815      	ldr	r0, [pc, #84]	; (8005ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c76:	f000 fc94 	bl	80065a2 <USBD_GetEpDesc>
 8005c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c7c:	2181      	movs	r1, #129	; 0x81
 8005c7e:	4813      	ldr	r0, [pc, #76]	; (8005ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c80:	f000 fc8f 	bl	80065a2 <USBD_GetEpDesc>
 8005c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2210      	movs	r2, #16
 8005c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca0:	711a      	strb	r2, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d006      	beq.n	8005cba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb4:	711a      	strb	r2, [r3, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2243      	movs	r2, #67	; 0x43
 8005cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cc0:	4b02      	ldr	r3, [pc, #8]	; (8005ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000050 	.word	0x20000050

08005cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	220a      	movs	r2, #10
 8005cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e009      	b.n	8005d18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	33b0      	adds	r3, #176	; 0xb0
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	32b0      	adds	r2, #176	; 0xb0
 8005d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e008      	b.n	8005d5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	32b0      	adds	r2, #176	; 0xb0
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e004      	b.n	8005d96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32b0      	adds	r2, #176	; 0xb0
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32b0      	adds	r2, #176	; 0xb0
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e018      	b.n	8005e04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	7c1b      	ldrb	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <USBD_CDC_ReceivePacket+0x68>)
 8005ddc:	7819      	ldrb	r1, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 ff8d 	bl	8007d08 <USBD_LL_PrepareReceive>
 8005dee:	e008      	b.n	8005e02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <USBD_CDC_ReceivePacket+0x68>)
 8005df2:	7819      	ldrb	r1, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 ff83 	bl	8007d08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000094 	.word	0x20000094

08005e10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e01f      	b.n	8005e68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	79fa      	ldrb	r2, [r7, #7]
 8005e5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f001 fdfd 	bl	8007a5c <USBD_LL_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e025      	b.n	8005ed4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32ae      	adds	r2, #174	; 0xae
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32ae      	adds	r2, #174	; 0xae
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	f107 020e 	add.w	r2, r7, #14
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 fe05 	bl	8007af4 <USBD_LL_Start>
 8005eea:	4603      	mov	r3, r0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 f908 	bl	800719e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d01a      	beq.n	8005fe8 <USBD_LL_SetupStage+0x72>
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d822      	bhi.n	8005ffc <USBD_LL_SetupStage+0x86>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <USBD_LL_SetupStage+0x4a>
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d00a      	beq.n	8005fd4 <USBD_LL_SetupStage+0x5e>
 8005fbe:	e01d      	b.n	8005ffc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fb5f 	bl	800668c <USBD_StdDevReq>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd2:	e020      	b.n	8006016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fbc7 	bl	8006770 <USBD_StdItfReq>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe6:	e016      	b.n	8006016 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fc29 	bl	8006848 <USBD_StdEPReq>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffa:	e00c      	b.n	8006016 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006002:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006006:	b2db      	uxtb	r3, r3
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fdd2 	bl	8007bb4 <USBD_LL_StallEP>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
      break;
 8006014:	bf00      	nop
  }

  return ret;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	460b      	mov	r3, r1
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d16e      	bne.n	8006116 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800603e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006046:	2b03      	cmp	r3, #3
 8006048:	f040 8098 	bne.w	800617c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	429a      	cmp	r2, r3
 8006056:	d913      	bls.n	8006080 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4293      	cmp	r3, r2
 8006070:	bf28      	it	cs
 8006072:	4613      	movcs	r3, r2
 8006074:	461a      	mov	r2, r3
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 f984 	bl	8007386 <USBD_CtlContinueRx>
 800607e:	e07d      	b.n	800617c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2b02      	cmp	r3, #2
 800608c:	d014      	beq.n	80060b8 <USBD_LL_DataOutStage+0x98>
 800608e:	2b02      	cmp	r3, #2
 8006090:	d81d      	bhi.n	80060ce <USBD_LL_DataOutStage+0xae>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <USBD_LL_DataOutStage+0x7c>
 8006096:	2b01      	cmp	r3, #1
 8006098:	d003      	beq.n	80060a2 <USBD_LL_DataOutStage+0x82>
 800609a:	e018      	b.n	80060ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	75bb      	strb	r3, [r7, #22]
            break;
 80060a0:	e018      	b.n	80060d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	4619      	mov	r1, r3
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fa5e 	bl	800656e <USBD_CoreFindIF>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75bb      	strb	r3, [r7, #22]
            break;
 80060b6:	e00d      	b.n	80060d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fa60 	bl	8006588 <USBD_CoreFindEP>
 80060c8:	4603      	mov	r3, r0
 80060ca:	75bb      	strb	r3, [r7, #22]
            break;
 80060cc:	e002      	b.n	80060d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75bb      	strb	r3, [r7, #22]
            break;
 80060d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060d4:	7dbb      	ldrb	r3, [r7, #22]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d119      	bne.n	800610e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d113      	bne.n	800610e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060e6:	7dba      	ldrb	r2, [r7, #22]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	32ae      	adds	r2, #174	; 0xae
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060f6:	7dba      	ldrb	r2, [r7, #22]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060fe:	7dba      	ldrb	r2, [r7, #22]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	32ae      	adds	r2, #174	; 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 f94a 	bl	80073a8 <USBD_CtlSendStatus>
 8006114:	e032      	b.n	800617c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	b2db      	uxtb	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fa31 	bl	8006588 <USBD_CoreFindEP>
 8006126:	4603      	mov	r3, r0
 8006128:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800612a:	7dbb      	ldrb	r3, [r7, #22]
 800612c:	2bff      	cmp	r3, #255	; 0xff
 800612e:	d025      	beq.n	800617c <USBD_LL_DataOutStage+0x15c>
 8006130:	7dbb      	ldrb	r3, [r7, #22]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d122      	bne.n	800617c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d117      	bne.n	8006172 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006142:	7dba      	ldrb	r2, [r7, #22]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	32ae      	adds	r2, #174	; 0xae
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00f      	beq.n	8006172 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006152:	7dba      	ldrb	r2, [r7, #22]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800615a:	7dba      	ldrb	r2, [r7, #22]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	32ae      	adds	r2, #174	; 0xae
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	7afa      	ldrb	r2, [r7, #11]
 8006168:	4611      	mov	r1, r2
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	4798      	blx	r3
 800616e:	4603      	mov	r3, r0
 8006170:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	e000      	b.n	800617e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	460b      	mov	r3, r1
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d16f      	bne.n	800627a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3314      	adds	r3, #20
 800619e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d15a      	bne.n	8006260 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d914      	bls.n	80061e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f001 f8ac 	bl	800732a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d2:	2300      	movs	r3, #0
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f001 fd95 	bl	8007d08 <USBD_LL_PrepareReceive>
 80061de:	e03f      	b.n	8006260 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d11c      	bne.n	8006226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d316      	bcc.n	8006226 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006202:	429a      	cmp	r2, r3
 8006204:	d20f      	bcs.n	8006226 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f001 f88d 	bl	800732a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f001 fd72 	bl	8007d08 <USBD_LL_PrepareReceive>
 8006224:	e01c      	b.n	8006260 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b03      	cmp	r3, #3
 8006230:	d10f      	bne.n	8006252 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fcad 	bl	8007bb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f001 f8b7 	bl	80073ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d03a      	beq.n	80062e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fe42 	bl	8005ef4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006278:	e032      	b.n	80062e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006280:	b2db      	uxtb	r3, r3
 8006282:	4619      	mov	r1, r3
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f97f 	bl	8006588 <USBD_CoreFindEP>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2bff      	cmp	r3, #255	; 0xff
 8006292:	d025      	beq.n	80062e0 <USBD_LL_DataInStage+0x15a>
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d122      	bne.n	80062e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d11c      	bne.n	80062e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062a6:	7dfa      	ldrb	r2, [r7, #23]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	32ae      	adds	r2, #174	; 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062b6:	7dfa      	ldrb	r2, [r7, #23]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062be:	7dfa      	ldrb	r2, [r7, #23]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	32ae      	adds	r2, #174	; 0xae
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	7afa      	ldrb	r2, [r7, #11]
 80062cc:	4611      	mov	r1, r2
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	4798      	blx	r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062d6:	7dbb      	ldrb	r3, [r7, #22]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062dc:	7dbb      	ldrb	r3, [r7, #22]
 80062de:	e000      	b.n	80062e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d014      	beq.n	8006350 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00e      	beq.n	8006350 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6852      	ldr	r2, [r2, #4]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	4611      	mov	r1, r2
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	2200      	movs	r2, #0
 8006354:	2100      	movs	r1, #0
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fbe7 	bl	8007b2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2240      	movs	r2, #64	; 0x40
 8006368:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	2180      	movs	r1, #128	; 0x80
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fbd9 	bl	8007b2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2240      	movs	r2, #64	; 0x40
 8006382:	621a      	str	r2, [r3, #32]

  return ret;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d106      	bne.n	80063fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d110      	bne.n	8006440 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	32ae      	adds	r2, #174	; 0xae
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	e01c      	b.n	80064a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b03      	cmp	r3, #3
 8006476:	d115      	bne.n	80064a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	32ae      	adds	r2, #174	; 0xae
 8006482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32ae      	adds	r2, #174	; 0xae
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	4611      	mov	r1, r2
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	32ae      	adds	r2, #174	; 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e01c      	b.n	800650a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d115      	bne.n	8006508 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	32ae      	adds	r2, #174	; 0xae
 80064e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32ae      	adds	r2, #174	; 0xae
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	4611      	mov	r1, r2
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6852      	ldr	r2, [r2, #4]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	4611      	mov	r1, r2
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800657a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006594:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	885b      	ldrh	r3, [r3, #2]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d920      	bls.n	800660c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065d2:	e013      	b.n	80065fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065d4:	f107 030a 	add.w	r3, r7, #10
 80065d8:	4619      	mov	r1, r3
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f000 f81b 	bl	8006616 <USBD_GetNextDesc>
 80065e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d108      	bne.n	80065fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	789b      	ldrb	r3, [r3, #2]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d008      	beq.n	800660a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	885b      	ldrh	r3, [r3, #2]
 8006600:	b29a      	uxth	r2, r3
 8006602:	897b      	ldrh	r3, [r7, #10]
 8006604:	429a      	cmp	r2, r3
 8006606:	d8e5      	bhi.n	80065d4 <USBD_GetEpDesc+0x32>
 8006608:	e000      	b.n	800660c <USBD_GetEpDesc+0x6a>
          break;
 800660a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800660c:	693b      	ldr	r3, [r7, #16]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	881a      	ldrh	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	4413      	add	r3, r2
 8006630:	b29a      	uxth	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	3301      	adds	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800666e:	8a3b      	ldrh	r3, [r7, #16]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	b21a      	sxth	r2, r3
 8006674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006678:	4313      	orrs	r3, r2
 800667a:	b21b      	sxth	r3, r3
 800667c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800667e:	89fb      	ldrh	r3, [r7, #14]
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d005      	beq.n	80066b2 <USBD_StdDevReq+0x26>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d857      	bhi.n	800675a <USBD_StdDevReq+0xce>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <USBD_StdDevReq+0x42>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d153      	bne.n	800675a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	32ae      	adds	r2, #174	; 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e04a      	b.n	8006764 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d83b      	bhi.n	800674e <USBD_StdDevReq+0xc2>
 80066d6:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <USBD_StdDevReq+0x50>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006745 	.word	0x08006745
 80066e4:	0800674f 	.word	0x0800674f
 80066e8:	0800673b 	.word	0x0800673b
 80066ec:	0800674f 	.word	0x0800674f
 80066f0:	0800670f 	.word	0x0800670f
 80066f4:	08006705 	.word	0x08006705
 80066f8:	0800674f 	.word	0x0800674f
 80066fc:	08006727 	.word	0x08006727
 8006700:	08006719 	.word	0x08006719
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa3c 	bl	8006b84 <USBD_GetDescriptor>
          break;
 800670c:	e024      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fba1 	bl	8006e58 <USBD_SetAddress>
          break;
 8006716:	e01f      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fbe0 	bl	8006ee0 <USBD_SetConfig>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]
          break;
 8006724:	e018      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc83 	bl	8007034 <USBD_GetConfig>
          break;
 800672e:	e013      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fcb4 	bl	80070a0 <USBD_GetStatus>
          break;
 8006738:	e00e      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fce3 	bl	8007108 <USBD_SetFeature>
          break;
 8006742:	e009      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd07 	bl	800715a <USBD_ClrFeature>
          break;
 800674c:	e004      	b.n	8006758 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd5e 	bl	8007212 <USBD_CtlError>
          break;
 8006756:	bf00      	nop
      }
      break;
 8006758:	e004      	b.n	8006764 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd58 	bl	8007212 <USBD_CtlError>
      break;
 8006762:	bf00      	nop
  }

  return ret;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d005      	beq.n	8006796 <USBD_StdItfReq+0x26>
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d852      	bhi.n	8006834 <USBD_StdItfReq+0xc4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <USBD_StdItfReq+0x26>
 8006792:	2b20      	cmp	r3, #32
 8006794:	d14e      	bne.n	8006834 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d840      	bhi.n	8006826 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	889b      	ldrh	r3, [r3, #4]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d836      	bhi.n	800681c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	889b      	ldrh	r3, [r3, #4]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fed9 	bl	800656e <USBD_CoreFindIF>
 80067bc:	4603      	mov	r3, r0
 80067be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2bff      	cmp	r3, #255	; 0xff
 80067c4:	d01d      	beq.n	8006802 <USBD_StdItfReq+0x92>
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067cc:	7bba      	ldrb	r2, [r7, #14]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	; 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067dc:	7bba      	ldrb	r2, [r7, #14]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067e4:	7bba      	ldrb	r2, [r7, #14]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	; 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067fa:	e004      	b.n	8006806 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006800:	e001      	b.n	8006806 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	88db      	ldrh	r3, [r3, #6]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d110      	bne.n	8006830 <USBD_StdItfReq+0xc0>
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10d      	bne.n	8006830 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fdc7 	bl	80073a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800681a:	e009      	b.n	8006830 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fcf7 	bl	8007212 <USBD_CtlError>
          break;
 8006824:	e004      	b.n	8006830 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fcf2 	bl	8007212 <USBD_CtlError>
          break;
 800682e:	e000      	b.n	8006832 <USBD_StdItfReq+0xc2>
          break;
 8006830:	bf00      	nop
      }
      break;
 8006832:	e004      	b.n	800683e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fceb 	bl	8007212 <USBD_CtlError>
      break;
 800683c:	bf00      	nop
  }

  return ret;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	889b      	ldrh	r3, [r3, #4]
 800685a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d007      	beq.n	8006878 <USBD_StdEPReq+0x30>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	f200 817f 	bhi.w	8006b6c <USBD_StdEPReq+0x324>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d02a      	beq.n	80068c8 <USBD_StdEPReq+0x80>
 8006872:	2b20      	cmp	r3, #32
 8006874:	f040 817a 	bne.w	8006b6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe83 	bl	8006588 <USBD_CoreFindEP>
 8006882:	4603      	mov	r3, r0
 8006884:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006886:	7b7b      	ldrb	r3, [r7, #13]
 8006888:	2bff      	cmp	r3, #255	; 0xff
 800688a:	f000 8174 	beq.w	8006b76 <USBD_StdEPReq+0x32e>
 800688e:	7b7b      	ldrb	r3, [r7, #13]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8170 	bne.w	8006b76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006896:	7b7a      	ldrb	r2, [r7, #13]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800689e:	7b7a      	ldrb	r2, [r7, #13]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32ae      	adds	r2, #174	; 0xae
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8163 	beq.w	8006b76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068b0:	7b7a      	ldrb	r2, [r7, #13]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32ae      	adds	r2, #174	; 0xae
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068c6:	e156      	b.n	8006b76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d008      	beq.n	80068e2 <USBD_StdEPReq+0x9a>
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	f300 8145 	bgt.w	8006b60 <USBD_StdEPReq+0x318>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 809b 	beq.w	8006a12 <USBD_StdEPReq+0x1ca>
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d03c      	beq.n	800695a <USBD_StdEPReq+0x112>
 80068e0:	e13e      	b.n	8006b60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d002      	beq.n	80068f4 <USBD_StdEPReq+0xac>
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d016      	beq.n	8006920 <USBD_StdEPReq+0xd8>
 80068f2:	e02c      	b.n	800694e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <USBD_StdEPReq+0xce>
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b80      	cmp	r3, #128	; 0x80
 80068fe:	d00a      	beq.n	8006916 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f955 	bl	8007bb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800690a:	2180      	movs	r1, #128	; 0x80
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 f951 	bl	8007bb4 <USBD_LL_StallEP>
 8006912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006914:	e020      	b.n	8006958 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fc7a 	bl	8007212 <USBD_CtlError>
              break;
 800691e:	e01b      	b.n	8006958 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10e      	bne.n	8006946 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <USBD_StdEPReq+0xfe>
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d008      	beq.n	8006946 <USBD_StdEPReq+0xfe>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f937 	bl	8007bb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fd2e 	bl	80073a8 <USBD_CtlSendStatus>

              break;
 800694c:	e004      	b.n	8006958 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fc5e 	bl	8007212 <USBD_CtlError>
              break;
 8006956:	bf00      	nop
          }
          break;
 8006958:	e107      	b.n	8006b6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d002      	beq.n	800696c <USBD_StdEPReq+0x124>
 8006966:	2b03      	cmp	r3, #3
 8006968:	d016      	beq.n	8006998 <USBD_StdEPReq+0x150>
 800696a:	e04b      	b.n	8006a04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <USBD_StdEPReq+0x146>
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d00a      	beq.n	800698e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f919 	bl	8007bb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006982:	2180      	movs	r1, #128	; 0x80
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f915 	bl	8007bb4 <USBD_LL_StallEP>
 800698a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800698c:	e040      	b.n	8006a10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc3e 	bl	8007212 <USBD_CtlError>
              break;
 8006996:	e03b      	b.n	8006a10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	885b      	ldrh	r3, [r3, #2]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d136      	bne.n	8006a0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f91f 	bl	8007bf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fcf7 	bl	80073a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fde2 	bl	8006588 <USBD_CoreFindEP>
 80069c4:	4603      	mov	r3, r0
 80069c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069c8:	7b7b      	ldrb	r3, [r7, #13]
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d01f      	beq.n	8006a0e <USBD_StdEPReq+0x1c6>
 80069ce:	7b7b      	ldrb	r3, [r7, #13]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11c      	bne.n	8006a0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069d4:	7b7a      	ldrb	r2, [r7, #13]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069dc:	7b7a      	ldrb	r2, [r7, #13]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32ae      	adds	r2, #174	; 0xae
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069ec:	7b7a      	ldrb	r2, [r7, #13]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	; 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a02:	e004      	b.n	8006a0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc03 	bl	8007212 <USBD_CtlError>
              break;
 8006a0c:	e000      	b.n	8006a10 <USBD_StdEPReq+0x1c8>
              break;
 8006a0e:	bf00      	nop
          }
          break;
 8006a10:	e0ab      	b.n	8006b6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <USBD_StdEPReq+0x1dc>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d032      	beq.n	8006a88 <USBD_StdEPReq+0x240>
 8006a22:	e097      	b.n	8006b54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <USBD_StdEPReq+0x1f2>
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d004      	beq.n	8006a3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbed 	bl	8007212 <USBD_CtlError>
                break;
 8006a38:	e091      	b.n	8006b5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da0b      	bge.n	8006a5a <USBD_StdEPReq+0x212>
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	3310      	adds	r3, #16
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	3304      	adds	r3, #4
 8006a58:	e00b      	b.n	8006a72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	3304      	adds	r3, #4
 8006a72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc37 	bl	80072f4 <USBD_CtlSendData>
              break;
 8006a86:	e06a      	b.n	8006b5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da11      	bge.n	8006ab4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	f003 020f 	and.w	r2, r3, #15
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d117      	bne.n	8006ada <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fbb0 	bl	8007212 <USBD_CtlError>
                  break;
 8006ab2:	e054      	b.n	8006b5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fb9d 	bl	8007212 <USBD_CtlError>
                  break;
 8006ad8:	e041      	b.n	8006b5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da0b      	bge.n	8006afa <USBD_StdEPReq+0x2b2>
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	3310      	adds	r3, #16
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	3304      	adds	r3, #4
 8006af8:	e00b      	b.n	8006b12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	3304      	adds	r3, #4
 8006b12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <USBD_StdEPReq+0x2d8>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b80      	cmp	r3, #128	; 0x80
 8006b1e:	d103      	bne.n	8006b28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e00e      	b.n	8006b46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f87f 	bl	8007c30 <USBD_LL_IsStallEP>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fbd1 	bl	80072f4 <USBD_CtlSendData>
              break;
 8006b52:	e004      	b.n	8006b5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fb5b 	bl	8007212 <USBD_CtlError>
              break;
 8006b5c:	bf00      	nop
          }
          break;
 8006b5e:	e004      	b.n	8006b6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb55 	bl	8007212 <USBD_CtlError>
          break;
 8006b68:	bf00      	nop
      }
      break;
 8006b6a:	e005      	b.n	8006b78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb4f 	bl	8007212 <USBD_CtlError>
      break;
 8006b74:	e000      	b.n	8006b78 <USBD_StdEPReq+0x330>
      break;
 8006b76:	bf00      	nop
  }

  return ret;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	f200 8128 	bhi.w	8006dfa <USBD_GetDescriptor+0x276>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <USBD_GetDescriptor+0x2c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006c25 	.word	0x08006c25
 8006bbc:	08006dfb 	.word	0x08006dfb
 8006bc0:	08006dfb 	.word	0x08006dfb
 8006bc4:	08006d9b 	.word	0x08006d9b
 8006bc8:	08006dc7 	.word	0x08006dc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	7c12      	ldrb	r2, [r2, #16]
 8006bd8:	f107 0108 	add.w	r1, r7, #8
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
 8006be0:	60f8      	str	r0, [r7, #12]
      break;
 8006be2:	e112      	b.n	8006e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1b      	ldrb	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f107 0208 	add.w	r2, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	2202      	movs	r2, #2
 8006c04:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c06:	e100      	b.n	8006e0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	f107 0208 	add.w	r2, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
      break;
 8006c22:	e0f2      	b.n	8006e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	885b      	ldrh	r3, [r3, #2]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	f200 80ac 	bhi.w	8006d88 <USBD_GetDescriptor+0x204>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBD_GetDescriptor+0xb4>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c51 	.word	0x08006c51
 8006c3c:	08006c85 	.word	0x08006c85
 8006c40:	08006cb9 	.word	0x08006cb9
 8006c44:	08006ced 	.word	0x08006ced
 8006c48:	08006d21 	.word	0x08006d21
 8006c4c:	08006d55 	.word	0x08006d55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7c12      	ldrb	r2, [r2, #16]
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c72:	e091      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 facb 	bl	8007212 <USBD_CtlError>
            err++;
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	72fb      	strb	r3, [r7, #11]
          break;
 8006c82:	e089      	b.n	8006d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca6:	e077      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fab1 	bl	8007212 <USBD_CtlError>
            err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb6:	e06f      	b.n	8006d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e05d      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa97 	bl	8007212 <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e055      	b.n	8006d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e043      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa7d 	bl	8007212 <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e03b      	b.n	8006d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d42:	e029      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa63 	bl	8007212 <USBD_CtlError>
            err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
          break;
 8006d52:	e021      	b.n	8006d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e00f      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa49 	bl	8007212 <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e007      	b.n	8006d98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa41 	bl	8007212 <USBD_CtlError>
          err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d96:	bf00      	nop
      }
      break;
 8006d98:	e037      	b.n	8006e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7c1b      	ldrb	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	f107 0208 	add.w	r2, r7, #8
 8006dae:	4610      	mov	r0, r2
 8006db0:	4798      	blx	r3
 8006db2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006db4:	e029      	b.n	8006e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa2a 	bl	8007212 <USBD_CtlError>
        err++;
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc4:	e021      	b.n	8006e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7c1b      	ldrb	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10d      	bne.n	8006dea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	f107 0208 	add.w	r2, r7, #8
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4798      	blx	r3
 8006dde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	2207      	movs	r2, #7
 8006de6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006de8:	e00f      	b.n	8006e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa10 	bl	8007212 <USBD_CtlError>
        err++;
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	3301      	adds	r3, #1
 8006df6:	72fb      	strb	r3, [r7, #11]
      break;
 8006df8:	e007      	b.n	8006e0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa08 	bl	8007212 <USBD_CtlError>
      err++;
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	3301      	adds	r3, #1
 8006e06:	72fb      	strb	r3, [r7, #11]
      break;
 8006e08:	bf00      	nop
  }

  if (err != 0U)
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11e      	bne.n	8006e4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	88db      	ldrh	r3, [r3, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e18:	893b      	ldrh	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	88da      	ldrh	r2, [r3, #6]
 8006e22:	893b      	ldrh	r3, [r7, #8]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bf28      	it	cs
 8006e28:	4613      	movcs	r3, r2
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e2e:	893b      	ldrh	r3, [r7, #8]
 8006e30:	461a      	mov	r2, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fa5d 	bl	80072f4 <USBD_CtlSendData>
 8006e3a:	e009      	b.n	8006e50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9e7 	bl	8007212 <USBD_CtlError>
 8006e44:	e004      	b.n	8006e50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 faae 	bl	80073a8 <USBD_CtlSendStatus>
 8006e4c:	e000      	b.n	8006e50 <USBD_GetDescriptor+0x2cc>
    return;
 8006e4e:	bf00      	nop
  }
}
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	889b      	ldrh	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d131      	bne.n	8006ece <USBD_SetAddress+0x76>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	88db      	ldrh	r3, [r3, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d12d      	bne.n	8006ece <USBD_SetAddress+0x76>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	885b      	ldrh	r3, [r3, #2]
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d829      	bhi.n	8006ece <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d104      	bne.n	8006e9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9bc 	bl	8007212 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9a:	e01d      	b.n	8006ed8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 feed 	bl	8007c88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa7a 	bl	80073a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	e009      	b.n	8006ed8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	e004      	b.n	8006ed8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f99e 	bl	8007212 <USBD_CtlError>
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <USBD_SetConfig+0x150>)
 8006ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ef8:	4b4d      	ldr	r3, [pc, #308]	; (8007030 <USBD_SetConfig+0x150>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d905      	bls.n	8006f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f985 	bl	8007212 <USBD_CtlError>
    return USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e08c      	b.n	8007026 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d002      	beq.n	8006f1e <USBD_SetConfig+0x3e>
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d029      	beq.n	8006f70 <USBD_SetConfig+0x90>
 8006f1c:	e075      	b.n	800700a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f1e:	4b44      	ldr	r3, [pc, #272]	; (8007030 <USBD_SetConfig+0x150>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d020      	beq.n	8006f68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f26:	4b42      	ldr	r3, [pc, #264]	; (8007030 <USBD_SetConfig+0x150>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f30:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <USBD_SetConfig+0x150>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fe ffe7 	bl	8005f0a <USBD_SetClassConfig>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f962 	bl	8007212 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f56:	e065      	b.n	8007024 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa25 	bl	80073a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2203      	movs	r2, #3
 8006f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f66:	e05d      	b.n	8007024 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa1d 	bl	80073a8 <USBD_CtlSendStatus>
      break;
 8006f6e:	e059      	b.n	8007024 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f70:	4b2f      	ldr	r3, [pc, #188]	; (8007030 <USBD_SetConfig+0x150>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f80:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <USBD_SetConfig+0x150>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f8a:	4b29      	ldr	r3, [pc, #164]	; (8007030 <USBD_SetConfig+0x150>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fe ffd6 	bl	8005f42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa06 	bl	80073a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f9c:	e042      	b.n	8007024 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <USBD_SetConfig+0x150>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d02a      	beq.n	8007002 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fe ffc4 	bl	8005f42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fba:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <USBD_SetConfig+0x150>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fc4:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <USBD_SetConfig+0x150>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fe ff9d 	bl	8005f0a <USBD_SetClassConfig>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f918 	bl	8007212 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fe ffa9 	bl	8005f42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ff8:	e014      	b.n	8007024 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9d4 	bl	80073a8 <USBD_CtlSendStatus>
      break;
 8007000:	e010      	b.n	8007024 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9d0 	bl	80073a8 <USBD_CtlSendStatus>
      break;
 8007008:	e00c      	b.n	8007024 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f900 	bl	8007212 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <USBD_SetConfig+0x150>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fe ff92 	bl	8005f42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	73fb      	strb	r3, [r7, #15]
      break;
 8007022:	bf00      	nop
  }

  return ret;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000210 	.word	0x20000210

08007034 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d004      	beq.n	8007050 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8e2 	bl	8007212 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800704e:	e023      	b.n	8007098 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	dc02      	bgt.n	8007062 <USBD_GetConfig+0x2e>
 800705c:	2b00      	cmp	r3, #0
 800705e:	dc03      	bgt.n	8007068 <USBD_GetConfig+0x34>
 8007060:	e015      	b.n	800708e <USBD_GetConfig+0x5a>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d00b      	beq.n	800707e <USBD_GetConfig+0x4a>
 8007066:	e012      	b.n	800708e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3308      	adds	r3, #8
 8007072:	2201      	movs	r2, #1
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f93c 	bl	80072f4 <USBD_CtlSendData>
        break;
 800707c:	e00c      	b.n	8007098 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	2201      	movs	r2, #1
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f934 	bl	80072f4 <USBD_CtlSendData>
        break;
 800708c:	e004      	b.n	8007098 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8be 	bl	8007212 <USBD_CtlError>
        break;
 8007096:	bf00      	nop
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d81e      	bhi.n	80070f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	88db      	ldrh	r3, [r3, #6]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d004      	beq.n	80070ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8a5 	bl	8007212 <USBD_CtlError>
        break;
 80070c8:	e01a      	b.n	8007100 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f043 0202 	orr.w	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	330c      	adds	r3, #12
 80070ea:	2202      	movs	r2, #2
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f900 	bl	80072f4 <USBD_CtlSendData>
      break;
 80070f4:	e004      	b.n	8007100 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f88a 	bl	8007212 <USBD_CtlError>
      break;
 80070fe:	bf00      	nop
  }
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d107      	bne.n	800712a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f940 	bl	80073a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007128:	e013      	b.n	8007152 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d10b      	bne.n	800714a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	889b      	ldrh	r3, [r3, #4]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	b29b      	uxth	r3, r3
 800713a:	b2da      	uxtb	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f930 	bl	80073a8 <USBD_CtlSendStatus>
}
 8007148:	e003      	b.n	8007152 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f860 	bl	8007212 <USBD_CtlError>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	b2db      	uxtb	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	2b02      	cmp	r3, #2
 8007170:	d80b      	bhi.n	800718a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	885b      	ldrh	r3, [r3, #2]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10c      	bne.n	8007194 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f910 	bl	80073a8 <USBD_CtlSendStatus>
      }
      break;
 8007188:	e004      	b.n	8007194 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f840 	bl	8007212 <USBD_CtlError>
      break;
 8007192:	e000      	b.n	8007196 <USBD_ClrFeature+0x3c>
      break;
 8007194:	bf00      	nop
  }
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fa41 	bl	8006650 <SWAPBYTE>
 80071ce:	4603      	mov	r3, r0
 80071d0:	461a      	mov	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff fa34 	bl	8006650 <SWAPBYTE>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fa27 	bl	8006650 <SWAPBYTE>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	80da      	strh	r2, [r3, #6]
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fcc8 	bl	8007bb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fcc4 	bl	8007bb4 <USBD_LL_StallEP>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d036      	beq.n	80072b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800724e:	6938      	ldr	r0, [r7, #16]
 8007250:	f000 f836 	bl	80072c0 <USBD_GetLen>
 8007254:	4603      	mov	r3, r0
 8007256:	3301      	adds	r3, #1
 8007258:	b29b      	uxth	r3, r3
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	701a      	strb	r2, [r3, #0]
  idx++;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	3301      	adds	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	2203      	movs	r2, #3
 800727c:	701a      	strb	r2, [r3, #0]
  idx++;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	3301      	adds	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007284:	e013      	b.n	80072ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	4413      	add	r3, r2
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3301      	adds	r3, #1
 8007296:	613b      	str	r3, [r7, #16]
    idx++;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	3301      	adds	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	4413      	add	r3, r2
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	3301      	adds	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e7      	bne.n	8007286 <USBD_GetString+0x52>
 80072b6:	e000      	b.n	80072ba <USBD_GetString+0x86>
    return;
 80072b8:	bf00      	nop
  }
}
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072d0:	e005      	b.n	80072de <USBD_GetLen+0x1e>
  {
    len++;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	3301      	adds	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3301      	adds	r3, #1
 80072dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f5      	bne.n	80072d2 <USBD_GetLen+0x12>
  }

  return len;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2202      	movs	r2, #2
 8007304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	2100      	movs	r1, #0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fcd3 	bl	8007cc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	2100      	movs	r1, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fcc2 	bl	8007cc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2203      	movs	r2, #3
 800735c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	2100      	movs	r1, #0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fcc6 	bl	8007d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fcb5 	bl	8007d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc81 	bl	8007cc6 <USBD_LL_Transmit>

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2205      	movs	r2, #5
 80073da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073de:	2300      	movs	r3, #0
 80073e0:	2200      	movs	r2, #0
 80073e2:	2100      	movs	r1, #0
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc8f 	bl	8007d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073f8:	2200      	movs	r2, #0
 80073fa:	4912      	ldr	r1, [pc, #72]	; (8007444 <MX_USB_DEVICE_Init+0x50>)
 80073fc:	4812      	ldr	r0, [pc, #72]	; (8007448 <MX_USB_DEVICE_Init+0x54>)
 80073fe:	f7fe fd07 	bl	8005e10 <USBD_Init>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007408:	f7f9 fa94 	bl	8000934 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800740c:	490f      	ldr	r1, [pc, #60]	; (800744c <MX_USB_DEVICE_Init+0x58>)
 800740e:	480e      	ldr	r0, [pc, #56]	; (8007448 <MX_USB_DEVICE_Init+0x54>)
 8007410:	f7fe fd2e 	bl	8005e70 <USBD_RegisterClass>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800741a:	f7f9 fa8b 	bl	8000934 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800741e:	490c      	ldr	r1, [pc, #48]	; (8007450 <MX_USB_DEVICE_Init+0x5c>)
 8007420:	4809      	ldr	r0, [pc, #36]	; (8007448 <MX_USB_DEVICE_Init+0x54>)
 8007422:	f7fe fc65 	bl	8005cf0 <USBD_CDC_RegisterInterface>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800742c:	f7f9 fa82 	bl	8000934 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007430:	4805      	ldr	r0, [pc, #20]	; (8007448 <MX_USB_DEVICE_Init+0x54>)
 8007432:	f7fe fd53 	bl	8005edc <USBD_Start>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800743c:	f7f9 fa7a 	bl	8000934 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007440:	bf00      	nop
 8007442:	bd80      	pop	{r7, pc}
 8007444:	200000ac 	.word	0x200000ac
 8007448:	20000214 	.word	0x20000214
 800744c:	20000018 	.word	0x20000018
 8007450:	20000098 	.word	0x20000098

08007454 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007458:	2200      	movs	r2, #0
 800745a:	4905      	ldr	r1, [pc, #20]	; (8007470 <CDC_Init_FS+0x1c>)
 800745c:	4805      	ldr	r0, [pc, #20]	; (8007474 <CDC_Init_FS+0x20>)
 800745e:	f7fe fc61 	bl	8005d24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007462:	4905      	ldr	r1, [pc, #20]	; (8007478 <CDC_Init_FS+0x24>)
 8007464:	4803      	ldr	r0, [pc, #12]	; (8007474 <CDC_Init_FS+0x20>)
 8007466:	f7fe fc7f 	bl	8005d68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800746a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000cf0 	.word	0x20000cf0
 8007474:	20000214 	.word	0x20000214
 8007478:	200004f0 	.word	0x200004f0

0800747c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007480:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007482:	4618      	mov	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	6039      	str	r1, [r7, #0]
 8007496:	71fb      	strb	r3, [r7, #7]
 8007498:	4613      	mov	r3, r2
 800749a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b23      	cmp	r3, #35	; 0x23
 80074a0:	d84a      	bhi.n	8007538 <CDC_Control_FS+0xac>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <CDC_Control_FS+0x1c>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	08007539 	.word	0x08007539
 80074ac:	08007539 	.word	0x08007539
 80074b0:	08007539 	.word	0x08007539
 80074b4:	08007539 	.word	0x08007539
 80074b8:	08007539 	.word	0x08007539
 80074bc:	08007539 	.word	0x08007539
 80074c0:	08007539 	.word	0x08007539
 80074c4:	08007539 	.word	0x08007539
 80074c8:	08007539 	.word	0x08007539
 80074cc:	08007539 	.word	0x08007539
 80074d0:	08007539 	.word	0x08007539
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007539 	.word	0x08007539
 80074dc:	08007539 	.word	0x08007539
 80074e0:	08007539 	.word	0x08007539
 80074e4:	08007539 	.word	0x08007539
 80074e8:	08007539 	.word	0x08007539
 80074ec:	08007539 	.word	0x08007539
 80074f0:	08007539 	.word	0x08007539
 80074f4:	08007539 	.word	0x08007539
 80074f8:	08007539 	.word	0x08007539
 80074fc:	08007539 	.word	0x08007539
 8007500:	08007539 	.word	0x08007539
 8007504:	08007539 	.word	0x08007539
 8007508:	08007539 	.word	0x08007539
 800750c:	08007539 	.word	0x08007539
 8007510:	08007539 	.word	0x08007539
 8007514:	08007539 	.word	0x08007539
 8007518:	08007539 	.word	0x08007539
 800751c:	08007539 	.word	0x08007539
 8007520:	08007539 	.word	0x08007539
 8007524:	08007539 	.word	0x08007539
 8007528:	08007539 	.word	0x08007539
 800752c:	08007539 	.word	0x08007539
 8007530:	08007539 	.word	0x08007539
 8007534:	08007539 	.word	0x08007539
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007538:	bf00      	nop
  }

  return (USBD_OK);
 800753a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4805      	ldr	r0, [pc, #20]	; (800756c <CDC_Receive_FS+0x24>)
 8007556:	f7fe fc07 	bl	8005d68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800755a:	4804      	ldr	r0, [pc, #16]	; (800756c <CDC_Receive_FS+0x24>)
 800755c:	f7fe fc22 	bl	8005da4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007560:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000214 	.word	0x20000214

08007570 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2212      	movs	r2, #18
 80075a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	200000c8 	.word	0x200000c8

080075b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2204      	movs	r2, #4
 80075c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	200000dc 	.word	0x200000dc

080075dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4907      	ldr	r1, [pc, #28]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
 80075f2:	4808      	ldr	r0, [pc, #32]	; (8007614 <USBD_FS_ProductStrDescriptor+0x38>)
 80075f4:	f7ff fe1e 	bl	8007234 <USBD_GetString>
 80075f8:	e004      	b.n	8007604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4904      	ldr	r1, [pc, #16]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
 80075fe:	4805      	ldr	r0, [pc, #20]	; (8007614 <USBD_FS_ProductStrDescriptor+0x38>)
 8007600:	f7ff fe18 	bl	8007234 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200014f0 	.word	0x200014f0
 8007614:	08007e68 	.word	0x08007e68

08007618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	4904      	ldr	r1, [pc, #16]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800762a:	f7ff fe03 	bl	8007234 <USBD_GetString>
  return USBD_StrDesc;
 800762e:	4b02      	ldr	r3, [pc, #8]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200014f0 	.word	0x200014f0
 800763c:	08007e80 	.word	0x08007e80

08007640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	221a      	movs	r2, #26
 8007650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007652:	f000 f843 	bl	80076dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007656:	4b02      	ldr	r3, [pc, #8]	; (8007660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	200000e0 	.word	0x200000e0

08007664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4907      	ldr	r1, [pc, #28]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800767a:	4808      	ldr	r0, [pc, #32]	; (800769c <USBD_FS_ConfigStrDescriptor+0x38>)
 800767c:	f7ff fdda 	bl	8007234 <USBD_GetString>
 8007680:	e004      	b.n	800768c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4904      	ldr	r1, [pc, #16]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007686:	4805      	ldr	r0, [pc, #20]	; (800769c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007688:	f7ff fdd4 	bl	8007234 <USBD_GetString>
  }
  return USBD_StrDesc;
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200014f0 	.word	0x200014f0
 800769c:	08007e94 	.word	0x08007e94

080076a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	4907      	ldr	r1, [pc, #28]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076b6:	4808      	ldr	r0, [pc, #32]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076b8:	f7ff fdbc 	bl	8007234 <USBD_GetString>
 80076bc:	e004      	b.n	80076c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076c2:	4805      	ldr	r0, [pc, #20]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076c4:	f7ff fdb6 	bl	8007234 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200014f0 	.word	0x200014f0
 80076d8:	08007ea0 	.word	0x08007ea0

080076dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076e2:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <Get_SerialNum+0x44>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076e8:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <Get_SerialNum+0x48>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076ee:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <Get_SerialNum+0x4c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007702:	2208      	movs	r2, #8
 8007704:	4909      	ldr	r1, [pc, #36]	; (800772c <Get_SerialNum+0x50>)
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f814 	bl	8007734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800770c:	2204      	movs	r2, #4
 800770e:	4908      	ldr	r1, [pc, #32]	; (8007730 <Get_SerialNum+0x54>)
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f000 f80f 	bl	8007734 <IntToUnicode>
  }
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	1fff7a10 	.word	0x1fff7a10
 8007724:	1fff7a14 	.word	0x1fff7a14
 8007728:	1fff7a18 	.word	0x1fff7a18
 800772c:	200000e2 	.word	0x200000e2
 8007730:	200000f2 	.word	0x200000f2

08007734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]
 800774a:	e027      	b.n	800779c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	0f1b      	lsrs	r3, r3, #28
 8007750:	2b09      	cmp	r3, #9
 8007752:	d80b      	bhi.n	800776c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	0f1b      	lsrs	r3, r3, #28
 8007758:	b2da      	uxtb	r2, r3
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	4619      	mov	r1, r3
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	440b      	add	r3, r1
 8007764:	3230      	adds	r2, #48	; 0x30
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e00a      	b.n	8007782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	b2da      	uxtb	r2, r3
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4619      	mov	r1, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	440b      	add	r3, r1
 800777c:	3237      	adds	r2, #55	; 0x37
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	3301      	adds	r3, #1
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4413      	add	r3, r2
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	3301      	adds	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
 800779c:	7dfa      	ldrb	r2, [r7, #23]
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d3d3      	bcc.n	800774c <IntToUnicode+0x18>
  }
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077bc:	f107 0314 	add.w	r3, r7, #20
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	609a      	str	r2, [r3, #8]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d4:	d147      	bne.n	8007866 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	4b25      	ldr	r3, [pc, #148]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	4a24      	ldr	r2, [pc, #144]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6313      	str	r3, [r2, #48]	; 0x30
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80077f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007800:	f107 0314 	add.w	r3, r7, #20
 8007804:	4619      	mov	r1, r3
 8007806:	481b      	ldr	r0, [pc, #108]	; (8007874 <HAL_PCD_MspInit+0xc0>)
 8007808:	f7f9 fbc0 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800780c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007812:	2302      	movs	r3, #2
 8007814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781a:	2300      	movs	r3, #0
 800781c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800781e:	230a      	movs	r3, #10
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007822:	f107 0314 	add.w	r3, r7, #20
 8007826:	4619      	mov	r1, r3
 8007828:	4812      	ldr	r0, [pc, #72]	; (8007874 <HAL_PCD_MspInit+0xc0>)
 800782a:	f7f9 fbaf 	bl	8000f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	4a0f      	ldr	r2, [pc, #60]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 8007834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007838:	6353      	str	r3, [r2, #52]	; 0x34
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 8007840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007842:	4a0b      	ldr	r2, [pc, #44]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 8007844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007848:	6453      	str	r3, [r2, #68]	; 0x44
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <HAL_PCD_MspInit+0xbc>)
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	2043      	movs	r0, #67	; 0x43
 800785c:	f7f9 fb3d 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007860:	2043      	movs	r0, #67	; 0x43
 8007862:	f7f9 fb56 	bl	8000f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007866:	bf00      	nop
 8007868:	3728      	adds	r7, #40	; 0x28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40023800 	.word	0x40023800
 8007874:	40020000 	.word	0x40020000

08007878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f7fe fb71 	bl	8005f76 <USBD_LL_SetupStage>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	4619      	mov	r1, r3
 80078c6:	f7fe fbab 	bl	8006020 <USBD_LL_DataOutStage>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	334c      	adds	r3, #76	; 0x4c
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	4619      	mov	r1, r3
 80078fa:	f7fe fc44 	bl	8006186 <USBD_LL_DataInStage>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fd78 	bl	800640a <USBD_LL_SOF>
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d102      	bne.n	800793c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	e008      	b.n	800794e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d102      	bne.n	800794a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	e001      	b.n	800794e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800794a:	f7f8 fff3 	bl	8000934 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fd18 	bl	800638e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fcc0 	bl	80062ea <USBD_LL_Reset>
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fd13 	bl	80063ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <HAL_PCD_SuspendCallback+0x48>)
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	4a03      	ldr	r2, [pc, #12]	; (80079bc <HAL_PCD_SuspendCallback+0x48>)
 80079ae:	f043 0306 	orr.w	r3, r3, #6
 80079b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fd03 	bl	80063da <USBD_LL_Resume>
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fd5b 	bl	80064ae <USBD_LL_IsoOUTIncomplete>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fd17 	bl	800644a <USBD_LL_IsoINIncomplete>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fd6d 	bl	8006512 <USBD_LL_DevConnected>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fd6a 	bl	8006528 <USBD_LL_DevDisconnected>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d13c      	bne.n	8007ae6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a6c:	4a20      	ldr	r2, [pc, #128]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a7c:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a86:	2204      	movs	r2, #4
 8007a88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a90:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a96:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a98:	2202      	movs	r2, #2
 8007a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <USBD_LL_Init+0x94>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <USBD_LL_Init+0x94>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <USBD_LL_Init+0x94>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007aae:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <USBD_LL_Init+0x94>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <USBD_LL_Init+0x94>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <USBD_LL_Init+0x94>)
 8007abc:	f7f9 fd60 	bl	8001580 <HAL_PCD_Init>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ac6:	f7f8 ff35 	bl	8000934 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	4808      	ldr	r0, [pc, #32]	; (8007af0 <USBD_LL_Init+0x94>)
 8007ace:	f7fa ffb8 	bl	8002a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ad2:	2240      	movs	r2, #64	; 0x40
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4806      	ldr	r0, [pc, #24]	; (8007af0 <USBD_LL_Init+0x94>)
 8007ad8:	f7fa ff6c 	bl	80029b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007adc:	2280      	movs	r2, #128	; 0x80
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4803      	ldr	r0, [pc, #12]	; (8007af0 <USBD_LL_Init+0x94>)
 8007ae2:	f7fa ff67 	bl	80029b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200016f0 	.word	0x200016f0

08007af4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7f9 fe55 	bl	80017ba <HAL_PCD_Start>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 f942 	bl	8007da0 <USBD_Get_USB_Status>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	461a      	mov	r2, r3
 8007b38:	4603      	mov	r3, r0
 8007b3a:	70fb      	strb	r3, [r7, #3]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70bb      	strb	r3, [r7, #2]
 8007b40:	4613      	mov	r3, r2
 8007b42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b52:	78bb      	ldrb	r3, [r7, #2]
 8007b54:	883a      	ldrh	r2, [r7, #0]
 8007b56:	78f9      	ldrb	r1, [r7, #3]
 8007b58:	f7fa fb26 	bl	80021a8 <HAL_PCD_EP_Open>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f91c 	bl	8007da0 <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fa fb6f 	bl	8002278 <HAL_PCD_EP_Close>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f8fd 	bl	8007da0 <USBD_Get_USB_Status>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fa fc47 	bl	8002466 <HAL_PCD_EP_SetStall>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f8de 	bl	8007da0 <USBD_Get_USB_Status>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fa fc8c 	bl	800252e <HAL_PCD_EP_ClrStall>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f8bf 	bl	8007da0 <USBD_Get_USB_Status>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da0b      	bge.n	8007c64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c52:	68f9      	ldr	r1, [r7, #12]
 8007c54:	4613      	mov	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	333e      	adds	r3, #62	; 0x3e
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	e00b      	b.n	8007c7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fa fa59 	bl	800215e <HAL_PCD_SetAddress>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f874 	bl	8007da0 <USBD_Get_USB_Status>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ce4:	7af9      	ldrb	r1, [r7, #11]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	f7fa fb72 	bl	80023d2 <HAL_PCD_EP_Transmit>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f853 	bl	8007da0 <USBD_Get_USB_Status>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	460b      	mov	r3, r1
 8007d16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d26:	7af9      	ldrb	r1, [r7, #11]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f7fa faee 	bl	800230c <HAL_PCD_EP_Receive>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f832 	bl	8007da0 <USBD_Get_USB_Status>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fa fb1e 	bl	80023a2 <HAL_PCD_EP_GetRxCount>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_static_malloc+0x18>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20001bfc 	.word	0x20001bfc

08007d8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d817      	bhi.n	8007de4 <USBD_Get_USB_Status+0x44>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBD_Get_USB_Status+0x1c>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007dd3 	.word	0x08007dd3
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007ddf 	.word	0x08007ddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd0:	e00b      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd6:	e008      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e005      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e002      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	73fb      	strb	r3, [r7, #15]
    break;
 8007de8:	bf00      	nop
  }
  return usb_status;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <memset>:
 8007df8:	4402      	add	r2, r0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d100      	bne.n	8007e02 <memset+0xa>
 8007e00:	4770      	bx	lr
 8007e02:	f803 1b01 	strb.w	r1, [r3], #1
 8007e06:	e7f9      	b.n	8007dfc <memset+0x4>

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4d0d      	ldr	r5, [pc, #52]	; (8007e40 <__libc_init_array+0x38>)
 8007e0c:	4c0d      	ldr	r4, [pc, #52]	; (8007e44 <__libc_init_array+0x3c>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	2600      	movs	r6, #0
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	4d0b      	ldr	r5, [pc, #44]	; (8007e48 <__libc_init_array+0x40>)
 8007e1a:	4c0c      	ldr	r4, [pc, #48]	; (8007e4c <__libc_init_array+0x44>)
 8007e1c:	f000 f818 	bl	8007e50 <_init>
 8007e20:	1b64      	subs	r4, r4, r5
 8007e22:	10a4      	asrs	r4, r4, #2
 8007e24:	2600      	movs	r6, #0
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	08007ed0 	.word	0x08007ed0
 8007e44:	08007ed0 	.word	0x08007ed0
 8007e48:	08007ed0 	.word	0x08007ed0
 8007e4c:	08007ed4 	.word	0x08007ed4

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
